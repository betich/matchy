const TagsList = ['Website Design', 'E-Sports', 'Video Editing', 'Photography', 'Transportation', 'Tourism', 'Technology', 'Supplier', 'Subscription', 'Store', 'Sports', 'Software', 'Pets', 'Organization', 'Logistics', 'Insurance', 'Health', 'Games', 'Food', 'Fintech', 'Farm', 'Environment', 'Entertainment', 'Education', 'eCommerce', 'Delivery', 'Dealer', 'Construction', 'Cafe', 'Beauty', 'Audit', 'Art', 'Animal', 'AI', 'Agency'];

// sorted = ['AI', 'Agency', 'Animal', 'Art', 'Audit', 'Beauty', 'Cafe', 'Construction', 'Dealer', 'Delivery', 
//           'E-Sports', 'Education', 'Entertainment', 'Environment', 'Farm', 'Fintech', 'Food', 'Games', 'Health', 'Insurance', 
//           'Logistics', 'Organization', 'Pets', 'Photography', 'Software', 'Sports', 'Store', 'Subscription', 'Supplier', 
//           'Technology', 'Tourism', 'Transportation', 'Video Editing', 'Website Design', 'eCommerce']

// setting
const exactfactor = 10;
const nearfactor = .8;
const randombiasfactor = 2;
const matchTable = [               //Cafe                          //Farm                                                   //Technology
    /* AI */[1.0, .1, .2, .5, .2, .1, .2, .3, .2, .2, .5, .4, .3, .3, .2, .6, .2, .5, .3, .3, .3, .2, .1, .6, .7, .4, .2, .2, .1, .4, .3, .2, .3, .3, .4],
    /* Ag */[ .1,1.0, .3, .2, .6, .1, .4, .6, .7, .4, .1, .2, .3, .2, .3, .2, .3, .1, .2, .6, .6, .8, .3, .2, .4, .5, .2, .6, .6, .2, .3, .6, .4, .6, .6],
    /* An */[ .2, .3,1.0, .1, .1, .1, .7, .4, .3, .6, .1, .2, .3, .4, .5, .2, .4, .3, .5, .5, .3, .2, .3, .2, .2, .1, .3, .3, .4, .3, .1, .2, .1, .1, .3],
    /* Ar */[ .5, .2, .1,1.0, .2, .6, .3, .4, .3, .3, .2, .7, .3, .2, .1, .1, .1, .2, .2, .2, .2, .1, .2, .7, .1, .4, .2, .4, .3, .4, .5, .3, .2, .4, .4],
    /* Au */[ .2, .6, .1, .2,1.0, .1, .3, .4, .6, .6, .6, .6, .4, .4, .3, .4, .2, .1, .2, .8, .4, .7, .2, .3, .1, .1, .4, .4, .4, .5, .2, .1, .1, .1, .2],
    /* Be */[ .1, .1, .1, .6, .1,1.0, .3, .1, .2, .2, .3, .2, .7, .4, .1, .1, .2, .1, .1, .3, .1, .1, .4, .7, .4, .3, .2, .4, .1, .3, .5, .3, .1, .2, .1],
    /* Ca */[ .2, .4, .7, .3, .3, .3,1.0, .7, .3, .5, .2, .3, .2, .1, .2, .1, .8, .3, .5, .1, .4, .1, .8, .4, .2, .2, .8, .2, .4, .3, .7, .4, .2, .5, .4],
    /* Co */[ .3, .6, .4, .4, .4, .1, .7,1.0, .7, .4, .2, .1, .1, .3, .4, .2, .1, .1, .1, .3, .4, .7, .2, .1, .1, .1, .4, .2, .2, .5, .2, .4, .1, .1, .1],
    /* De */[ .2, .7, .3, .3, .6, .2, .3, .7,1.0, .6, .2, .3, .4, .2, .1, .1, .1, .4, .4, .4, .4, .4, .2, .1, .2, .4, .5, .4, .6, .2, .3, .2, .1, .1, .5],
    /* De */[ .2, .4, .6, .3, .6, .2, .5, .4, .6,1.0, .1, .1, .1, .3, .4, .1, .3, .1, .2, .1, .6, .2, .1, .1, .2, .1, .3, .2, .4, .3, .3, .5, .1, .1, .2],
    /* Es */[ .5, .1, .1, .2, .6, .3, .2, .2, .2, .1,1.0, .2, .4, .1, .1, .1, .1, .9, .2, .1, .1, .2, .1, .2, .3, .6, .1, .2, .1, .3, .2, .1, .2, .2, .2],
    /* Ed */[ .4, .2, .2, .7, .6, .2, .3, .1, .3, .1, .2,1.0, .1, .1, .1, .1, .2, .2, .3, .3, .1, .2, .1, .1, .3, .4, .1, .1, .1, .2, .1, .3, .2, .1, .1],
    /* En */[ .3, .3, .3, .3, .4, .7, .2, .1, .4, .1, .4, .1,1.0, .2, .1, .1, .2, .1, .2, .1, .2, .1, .1, .5, .2, .1, .1, .2, .1, .1, .3, .2, .1, .1, .1],
    /* En */[ .3, .2, .4, .2, .4, .4, .1, .3, .2, .3, .1, .1, .2,1.0, .3, .1, .1, .1, .4, .1, .1, .2, .1, .2, .1, .1, .1, .1, .1, .2, .1, .1, .1, .1, .1],
    /* Fa */[ .2, .3, .5, .1, .3, .1, .2, .4, .1, .4, .1, .1, .1, .3,1.0, .1, .4, .1, .3, .1, .2, .1, .4, .1, .1, .1, .2, .1, .1, .2, .2, .1, .1, .1, .1],
    /* Fi */[ .6, .2, .2, .1, .4, .1, .1, .2, .1, .1, .1, .1, .1, .1, .1,1.0, .1, .2, .3, .3, .1, .2, .1, .1, .1, .1, .2, .3, .3, .3, .2, .1, .1, .2, .4],
    /* Fo */[ .2, .3, .4, .1, .2, .2, .8, .1, .1, .3, .1, .2, .2, .1, .4, .1,1.0, .1, .4, .2, .1, .3, .4, .2, .1, .1, .4, .1, .2, .2, .3, .1, .1, .2, .2],
    /* Ga */[ .5, .1, .3, .2, .1, .1, .3, .1, .4, .1, .9, .2, .1, .1, .1, .2, .1,1.0, .1, .1, .1, .2, .1, .1, .4, .2, .1, .1, .1, .2, .1, .1, .2, .2, .1],
    /* He */[ .3, .2, .5, .2, .2, .1, .5, .1, .4, .2, .2, .3, .2, .4, .3, .3, .4, .1,1.0, .7, .1, .1, .3, .1, .2, .4, .1, .2, .1, .2, .1, .1, .1, .1, .1],
    /* In */[ .3, .6, .3, .2, .4, .1, .4, .4, .4, .6, .1, .1, .2, .1, .2, .1, .1, .1, .1,1.0, .1, .1, .3, .1, .1, .1, .1, .4, .1, .2, .2, .1, .1, .2, .1],
    /* Lo */[ .3, .6, .3, .2, .4, .1, .4, .4, .4, .6, .1, .1, .2, .1, .2, .1, .1, .1, .1, .1,1.0, .2, .1, .1, .3, .1, .1, .3, .2, .1, .1, .1, .2, .2, .1],
    /* Or */[ .2, .8, .2, .1, .7, .1, .1, .7, .4, .2, .2, .2, .1, .2, .1, .2, .3, .2, .1, .1, .2,1.0, .1, .1, .1, .2, .2, .2, .1, .1, .1, .1, .2, .1, .1],
    /* Pe */[ .1, .3, .3, .2, .2, .4, .8, .2, .2, .1, .1, .1, .1, .1, .4, .1, .4, .1, .3, .3, .1, .1,1.0, .3, .2, .1, .1, .1, .2, .1, .2, .1, .2, .2, .1],
    /* Ph */[ .6, .2, .2, .7, .3, .7, .4, .1, .1, .1, .2, .1, .5, .2, .1, .1, .2, .1, .1, .1, .1, .1, .3,1.0, .2, .3, .1, .1, .1, .2, .5, .2, .2, .1, .1],
    /* So */[ .7, .4, .2, .1, .1, .4, .2, .1, .2, .2, .3, .3, .2, .1, .1, .1, .1, .4, .2, .1, .3, .1, .2, .2,1.0, .2, .2, .2, .2, .2, .1, .1, .1, .3, .1],
    /* Sp */[ .4, .5, .1, .4, .1, .3, .2, .1, .4, .1, .6, .4, .1, .1, .1, .1, .1, .2, .4, .1, .1, .2, .1, .3, .2,1.0, .2, .1, .1, .2, .1, .1, .2, .2, .1],
    /* St */[ .2, .2, .3, .2, .4, .2, .8, .4, .5, .3, .1, .1, .1, .1, .2, .2, .4, .1, .1, .1, .1, .2, .1, .1, .2, .2,1.0, .3, .3, .2, .1, .1, .1, .3, .4],
    /* Su */[ .2, .6, .3, .4, .4, .4, .2, .2, .4, .2, .2, .1, .2, .1, .1, .3, .1, .1, .2, .4, .3, .2, .1, .1, .2, .1, .3,1.0, .2, .1, .1, .1, .1, .1, .1],
    /* Su */[ .1, .6, .4, .3, .4, .1, .4, .2, .6, .4, .1, .1, .1, .1, .1, .3, .2, .1, .1, .1, .2, .1, .2, .1, .2, .1, .3, .2,1.0, .3, .1, .1, .1, .1, .1],
    /* Te */[ .4, .2, .3, .4, .5, .3, .3, .5, .2, .3, .3, .2, .1, .2, .2, .3, .2, .2, .2, .2, .1, .1, .1, .2, .2, .2, .2, .1, .3,1.0, .2, .1, .1, .3, .2],
    /* To */[ .3, .3, .1, .5, .2, .5, .7, .2, .3, .3, .2, .1, .3, .1, .2, .2, .3, .1, .1, .2, .1, .1, .2, .5, .1, .1, .1, .1, .1, .2,1.0, .5, .2, .3, .1],
    /* Tr */[ .2, .6, .2, .3, .1, .3, .4, .4, .2, .5, .1, .3, .2, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .2, .1, .1, .1, .1, .1, .1, .5,1.0, .1, .1, .1],
    /* Vi */[ .3, .4, .1, .2, .1, .1, .2, .1, .1, .1, .2, .2, .1, .1, .1, .1, .1, .2, .1, .1, .2, .2, .2, .2, .1, .2, .1, .1, .1, .1, .2, .1,1.0, .3, .1],
    /* We */[ .3, .6, .1, .4, .1, .2, .5, .1, .1, .1, .2, .1, .1, .1, .1, .2, .2, .2, .1, .2, .2, .1, .2, .1, .3, .2, .3, .1, .1, .3, .3, .1, .3,1.0, .1],
    /* eC */[ .4, .6, .3, .4, .2, .1, .4, .1, .5, .2, .2, .1, .1, .1, .1, .4, .2, .1, .1, .1, .1, .1, .1, .1, .1, .1, .4, .1, .1, .2, .1, .1, .1, .1,1.0]
]

const sum = (a,b) => {
    if (a.length !== b.length) {
        console.log(a);
        console.log(b);
        throw new Error("Invalid Array Size");
    }
    let c = new Array(a.length);
    for ( let i = 0 ; i < a.length ; i++) {
        c[i] = a[i] + b[i];
    }
    return c;
}

const sorted = TagsList.sort();


const matchscore = (userInterest, projectInterest) => {
    let userScore = new Array(sorted.length).fill(0);
    userInterest.forEach(interest => {
        userScore = sum(userScore, matchTable[sorted.findIndex(element => element === interest)]);
    })
    let score = 0;
    projectInterest.forEach(tags => {
        const idx = sorted.findIndex(elem => elem === tags);
        score += userScore[idx] * nearfactor;
        if (userInterest.includes(tags)) {
            score += exactfactor;
        }
    })
    score += Math.random() * randombiasfactor;
    return score;
}

module.exports = matchscore;