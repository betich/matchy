{"version":3,"sources":["Services/Validate.js","Components/Error.js","Components/Tag.js","Components/Required.js","Services/Mock.js","Components/ExpandableFields.js","Components/DatePicker.js","Components/Form/User.js"],"names":["validate","formData","invalidData","addToInvalid","key","errMsg","push","Object","entries","value","match","length","undefined","projectMatch","some","e","day","month","year","Date","getUTCFullYear","valid","keys","constructor","Error","props","ErrorMessages","errors","map","i","name","className","join","variant","Tag","useState","startState","clicked","setClick","firstRender","useRef","useEffect","current","tagChange","onChange","label","onClick","Tags","state","tags","initialState","bind","forEach","elem","onAsDefault","this","setState","checked","newTags","idx","findIndex","concat","slice","modifyTags","group","TagButtons","React","Component","Required","style","color","TagsList","EducationOptions","InputField","Form","Control","required","as","placeholder","SelectField","options","FormInputGroup","uID","title","titleChange","valueChange","sendDelete","onKeyDown","target","handleFieldChange","preventDefault","handleDelete","keyCode","addField","expField","focus","addEventListener","removeEventListener","type","option","Row","Col","xs","InputGroup","ref","Button","size","InputFieldGroup","fields","defaultValue","IDCount","handleAdd","newUID","newFields","field","console","log","fieldElems","months","range","start","end","ans","DatePicker","startYear","currentYear","inputChange","sendData","dataset","format","error","prevProps","prevState","Group","sm","md","lg","data-format","disabled","reverse","PageOne","controlId","Label","autoFocus","data","fullname","edit","username","email","password","UserNamePassword","handleBirthday","birthday","PageTwo","setInfo","experiences","education","work","Interests","interests","UserForm","oldData","page","_next","_prev","date","RenderPage"],"mappings":"kHAqJeA,IArJE,SAACC,GAkBd,IAjBA,IAAIC,EAAc,GAEZC,EAAe,SAACC,EAAKC,GACnBD,KAAOF,EACPA,EAAYE,GAAKE,KAAKD,GAEtBH,EAAYE,GAAO,CAACC,IAW5B,MAA2BE,OAAOC,QAAQP,GAA1C,eAAqD,CAAC,IAAD,sBAAzCG,EAAyC,KAApCK,EAAoC,KACjD,OAAQL,GACJ,IAAK,WAEqBK,EAAMC,MADN,kBAGlBP,EAAa,WAAY,yCAEzBM,EAAME,OAAS,GAAKF,EAAME,OAAS,KACnCR,EAAa,WAAY,gDAER,IAAjBM,EAAME,QACNR,EAAa,WAAY,yBAE7B,MAEJ,IAAK,WAEqBM,EAAMC,MADV,2GAIdP,EAAa,WAAY,2BAE7B,MAEJ,IAAK,QAGL,IAAK,cACD,MAEJ,IAAK,QAEkBM,EAAMC,MADN,yJAIfP,EAAa,QAAS,wBAE1B,MAEJ,IAAK,WACD,QAAcS,IAAVH,EAAqB,MAEHA,EAAMC,MADN,+BAIlBP,EAAa,WAAY,gGAE7B,MAEJ,IAAK,cACD,IACMU,EAAeJ,EAAMC,MADN,kBAEhBD,EAGII,GACLV,EAAa,cAAe,4CAH5BA,EAAa,cAAe,kCAKhC,MAEJ,IAAK,WACGM,EAAMK,MAAK,SAACC,GAAD,MAAa,KAANA,MAClBZ,EAAa,YAAa,+BAE9B,MAEJ,IAAK,YAGL,IAAK,cAGL,IAAK,YACD,MAEJ,IAAK,OACqB,IAAjBM,EAAME,QACPR,EAAa,OAAQ,gCAEzB,MAEJ,IAAK,WAAL,IAEWa,EAAoBP,EAApBO,IAAKC,EAAeR,EAAfQ,MAAOC,EAAQT,EAARS,KAKdF,GAAQC,GAAUC,GACnBf,EAAa,WAAY,uBAIf,IAAVc,EAGK,IAAMC,EAAO,GAAK,IAAMA,EAAO,KAChC,IAAMA,EAAO,KAETF,EAAM,IAAMA,EAAM,IAClBb,EAAa,WAAY,gBAGzBa,EAAM,IAAMA,EAAM,IAClBb,EAAa,WAAY,eAI7Ba,EAxBS,CACb,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAuBdC,EAAQ,IACvBd,EAAa,WAAY,eAK7Be,GAzHE,IAAIC,MACCC,kBAyHPjB,EAAa,WAAY,gBAE7B,MAEJ,QACIA,EAAa,aAAc,CAACC,EAAKK,KAO7C,MAAO,CAAEY,MADuC,IAApCd,OAAOe,KAAKpB,GAAaS,QAAgBT,EAAYqB,cAAgBhB,OAC1DL,YAAaA,K,6DC/GzBsB,IA3BD,SAACC,GACX,IAAIC,EAAsD,IAArCnB,OAAOe,KAAKG,EAAME,QAAQhB,QAAgBc,EAAME,OAAOJ,cAAgBhB,OACtF,GACAA,OAAOC,QAAQiB,EAAME,QACtBC,KAAI,WAAcC,GAAO,IAAD,mBAAlBzB,EAAkB,KAAb0B,EAAa,KACrB,OACI,8BACI,mBAAGC,UAAU,OAAb,SAAqB3B,IACrB,mBAAG2B,UAAU,MAAb,SAAoBD,EAAKE,KAAK,WAF1BH,MAOpB,OACI,mCACqB,KAAlBH,EAEK,cAAC,IAAD,CAAOO,QAAQ,SAAf,SACI,8BAAMP,MAGd,iC,qHCfNQ,EAAM,SAACT,GAAW,IAAD,EACSU,mBAASV,EAAMW,YADxB,mBACZC,EADY,KACHC,EADG,KAEbC,EAAcC,kBAAO,GAe3B,OATAC,qBAAU,WACFF,EAAYG,QACZH,EAAYG,SAAU,GAGtBC,EADkBlB,EAAMmB,UACdnB,EAAMoB,MAAOR,KAE5B,CAACA,EAASZ,EAAMoB,MAAOpB,EAAMmB,WAG5B,cAAC,IAAD,CACIb,UAAU,eACVE,QAAUI,EAAiC,aAAvB,qBACpBS,QAjBY,SAAC/B,GACjBuB,GAAUD,IAaV,SAKKZ,EAAMoB,SAKbE,E,kDACF,WAAYtB,GAAQ,IAAD,gCACf,cAAMA,IACDuB,MAAQ,CACTC,KAAM,IAEV,EAAKC,aAAe,GACpB,EAAKP,UAAY,EAAKA,UAAUQ,KAAf,gBACjB,EAAK1B,MAAMwB,KAAKG,SAAQ,SAACC,GAAD,OAAW,EAAKH,aAAaG,IAAQ,KAC7D,YAAK5B,MAAM6B,mBAAX,SAAwBF,SAAQ,SAACC,GAC7B,EAAKH,aAAaG,IAAQ,KATf,E,gEAeVE,KAAK9B,MAAM6B,aAAeC,KAAK9B,MAAM6B,YAAY3C,OAAS,GAC/D4C,KAAKC,SAAS,CAAEP,KAAMM,KAAK9B,MAAM6B,gB,gCAG3BT,EAAOY,GAAU,IACnBC,EADkB,OAQtBA,EANmB,SAACT,GAChB,IAAIU,EAAMV,EAAKW,WAAU,SAAC7C,GAAD,OAAOA,IAAM8B,KACtC,OAAOY,EACDR,EAAKY,OAAOhB,GACZI,EAAKa,MAAM,EAAGH,GAAKE,OAAOZ,EAAKa,MAAMH,EAAM,EAAGV,EAAKtC,SAEnDoD,CAAWR,KAAKP,MAAMC,MAChCM,KAAKC,SAAS,CAAEP,KAAMS,IAAW,WAC7B,EAAKjC,MAAMmB,SAAS,EAAKnB,MAAMuC,MAAO,EAAKhB,MAAMC,W,+BAKrD,IAAIgB,EAAa,GACjB,IAAK,IAAM7D,KAAOmD,KAAKL,aACnBe,EAAW3D,KACP,cAAC4B,EAAD,CACIU,SAAUW,KAAKZ,UACfqB,MAAOT,KAAK9B,MAAMuC,MAClBnB,MAAOzC,EAEPgC,WAAYmB,KAAKL,aAAa9C,IADzBA,IAYjB,OAAO,mCAAG6D,Q,GAtDCC,IAAMC,WA0DVpB,O,4CC9FAqB,IANE,SAAC3C,GACd,OACI,sBAAM4C,MAAO,CAACC,MAAO,OAArB,iB,iCCFR,wEAAMC,EAAW,CAAC,iBAAkB,WAAY,gBAAiB,cAAe,iBAAkB,UAAW,aAAc,WAAY,eAAgB,QAAS,SAAU,WAAY,OAAQ,eAAgB,YAAa,YAAa,SAAU,QAAS,OAAQ,UAAW,OAAQ,cAAe,gBAAiB,YAAa,YAAa,WAAY,SAAU,eAAgB,OAAQ,SAAU,QAAS,MAAO,SAAU,KAAM,UAElaC,EAAmB,CAAC,gBAAiB,cAAe,aAAc,Y,mLCgBlEC,EAAa,SAAChD,GAChB,OACI,cAACiD,EAAA,EAAKC,QAAN,CACIC,UAAQ,EACRC,GAAG,QACHpE,MAAOgB,EAAMhB,MACbmC,SAAUnB,EAAMmB,SAChBkC,YAAY,WAMlBC,EAAc,SAACtD,GACjB,OACI,mCACI,cAACiD,EAAA,EAAKC,QAAN,CACIE,GAAG,SACHjC,SAAUnB,EAAMmB,SAFpB,SAIKnB,EAAMuD,aAMjBC,E,kDACF,WAAYxD,GAAQ,IAAD,8BACf,cAAMA,IAEDuB,MAAQ,CACTkC,IAAK,EAAKzD,MAAMyD,IAChBC,MAAO,EAAK1D,MAAM0D,MAClB1E,MAAO,EAAKgB,MAAMhB,OAGtB,EAAK2E,YAAc,EAAKA,YAAYjC,KAAjB,gBACnB,EAAKkC,YAAc,EAAKA,YAAYlC,KAAjB,gBACnB,EAAKmC,WAAa,EAAKA,WAAWnC,KAAhB,gBAClB,EAAKoC,UAAY,EAAKA,UAAUpC,KAAf,gBAZF,E,wDAePpC,GAAI,IAAD,OACXwC,KAAKC,SAAS,CAAE2B,MAAOpE,EAAEyE,OAAO/E,QAAS,WACrC,EAAKgB,MAAMgE,kBAAkB,EAAKzC,Y,kCAI9BjC,GAAI,IAAD,OACXwC,KAAKC,SAAS,CAAE/C,MAAOM,EAAEyE,OAAO/E,QAAS,WACrC,EAAKgB,MAAMgE,kBAAkB,EAAKzC,Y,iCAI/BjC,GACPA,EAAE2E,iBACFnC,KAAK9B,MAAMkE,aAAapC,KAAKP,S,gCAGvBjC,GACY,IAAdA,EAAE6E,SAAerC,KAAK9B,MAAMoE,a,0CAIhCtC,KAAKuC,SAASC,QACdxC,KAAKuC,SAASE,iBAAiB,UAAWzC,KAAKgC,WAAW,K,6CAI1DhC,KAAKuC,SAASG,oBAAoB,UAAW1C,KAAKgC,WAAW,K,+BAGvD,IACFP,EADC,OAML,MAJwB,WAApBzB,KAAK9B,MAAMyE,OACXlB,EAAUzB,KAAK9B,MAAMuD,QAAQpD,KAAI,SAACuE,EAAQtE,GAAT,OAAe,iCAAiBsE,GAAJtE,OAI7D,eAAC6C,EAAA,EAAK0B,IAAN,WACI,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAT,SACI,eAACC,EAAA,EAAD,WAC2B,WAApBhD,KAAK9B,MAAMyE,KACR,cAAC,EAAD,CAAatD,SAAUW,KAAK6B,YAAaJ,QAASA,IAClD,cAAC,EAAD,CAAYvE,MAAO8C,KAAKP,MAAMmC,MAAOvC,SAAUW,KAAK6B,cAE1D,cAACV,EAAA,EAAKC,QAAN,CACIC,UAAQ,EACR4B,IAAK,SAAAnD,GAAI,OAAI,EAAKyC,SAAWzC,GAC7BwB,GAAG,QACHpE,MAAO8C,KAAKP,MAAMvC,MAClBmC,SAAUW,KAAK8B,YACfP,YAAY,eAIxB,cAACuB,EAAA,EAAD,CAAKC,GAAI,EAAT,SACI,cAACG,EAAA,EAAD,CAAQxE,QAAQ,SAASa,QAASS,KAAK+B,WAAvC,SACI,cAAC,IAAD,CAAeoB,KAAM,gB,GAxEhBxC,IAAMC,WA4JpBwC,E,kDA3EX,WAAYlF,GAAQ,IAAD,8BACf,cAAMA,IAEDuB,MAAQ,CACT4D,OAAQ,EAAKnF,MAAMoF,cAAgB,GACnCC,QAAS,GAEb,EAAKC,UAAY,EAAKA,UAAU5D,KAAf,gBACjB,EAAKwC,aAAe,EAAKA,aAAaxC,KAAlB,gBACpB,EAAKsC,kBAAoB,EAAKA,kBAAkBtC,KAAvB,gBATV,E,sDAYTpC,GAAI,IAAD,OACLiG,EAASzD,KAAKP,MAAM8D,QAAU,EAC9BhC,EAAcvB,KAAK9B,MAAMuD,QAAUzB,KAAK9B,MAAMuD,QAAQ,GAAK,SAC3DiC,EAAY,YAAI1D,KAAKP,MAAM4D,QAAQ/C,OAAO,CAC1CsB,MAAOL,EAAarE,MAAO,GAAIyE,IAAK8B,IAGxCzD,KAAKC,SAAS,CAAEoD,OAAQK,EAAWH,QAASE,IAAU,WAClD,EAAKvF,MAAMmB,SAAS,EAAKnB,MAAMK,KAAM,EAAKkB,MAAM4D,a,mCAI3CM,GAET,IAFiB,IAAD,OACZD,EAAS,YAAO1D,KAAKP,MAAM4D,QACtB/E,EAAI,EAAGA,EAAIoF,EAAUtG,OAAQkB,IAC9BqF,EAAK,MAAY3D,KAAKP,MAAM4D,OAAO/E,GAAlB,MACjBoF,EAAYA,EAAUnD,MAAM,EAAGjC,GAAGgC,OAAOoD,EAAUnD,MAAMjC,EAAE,EAAGoF,EAAUtG,UAIhF4C,KAAKC,SAAS,CAAEoD,OAAQK,IAAa,WACjCE,QAAQC,IAAI,EAAKpE,MAAM4D,QACvB,EAAKnF,MAAMmB,SAAS,EAAKnB,MAAMK,KAAM,EAAKkB,MAAM4D,a,wCAItCM,GAAQ,IAAD,OACjBD,EAAS,YAAO1D,KAAKP,MAAM4D,QAE/B,IAAK,IAAI7F,KAAKkG,EACNC,EAAK,MAAY3D,KAAKP,MAAM4D,OAAO7F,GAAlB,MACjBkG,EAAUlG,GAAKmG,GAIvB3D,KAAKC,SAAS,CAAEoD,OAAQK,IAAa,WACjC,EAAKxF,MAAMmB,SAAS,EAAKnB,MAAMK,KAAM,EAAKkB,MAAM4D,a,+BAI9C,IAAD,OACDS,EAAa9D,KAAKP,MAAM4D,OAAOhF,KAAI,SAACsF,EAAOrF,GAC3C,OAAO,cAAC,EAAD,CAEHqD,IAAKgC,EAAMhC,IACXC,MAAO+B,EAAM/B,MACb1E,MAAOyG,EAAMzG,MACbgF,kBAAmB,EAAKA,kBACxBE,aAAc,EAAKA,aACnBX,QAAS,EAAKvD,MAAMuD,QACpBkB,KAAM,EAAKzE,MAAMyE,KACjBL,SAAU,EAAKkB,WARVlF,MAWb,OACI,qCACI,cAAC4E,EAAA,EAAD,CAAQxE,QAAQ,SAASa,QAASS,KAAKwD,UAAvC,iBACCM,S,GAtEanD,IAAMC,WC7G9BmD,EAAS,CACX,UAAW,WAAY,QAAS,QAAS,MAAO,OAChD,OAAQ,SAAU,YAAa,UAAW,WAAY,YAG1D,SAASC,EAAMC,EAAOC,GAElB,IADA,IAAIC,EAAM,GACD7F,EAAI2F,EAAO3F,GAAK4F,EAAK5F,IAC1B6F,EAAIpH,KAAKuB,GAEb,OAAO6F,EAGX,IAyEeC,E,kDAjEX,WAAYlG,GAAQ,IAAD,8BACf,cAAMA,IACDuB,MAAQ,CACThC,IAAK,EAAKS,MAAMT,IAChBC,MAAO,EAAKQ,MAAMR,MAClBC,KAAM,EAAKO,MAAMP,MAErB,EAAK0G,UAAY,KACjB,EAAKC,aAfK,IAAI1G,MACCC,iBAef,EAAK0G,YAAc,EAAKA,YAAY3E,KAAjB,gBACnB,EAAK4E,SAAW,EAAKA,SAAS5E,KAAd,gBAVD,E,wDAaPpC,GACR,OAAQA,EAAEyE,OAAOwC,QAAQC,QACrB,IAAK,MACD1E,KAAKC,SAAS,CAAExC,IAAKD,EAAEyE,OAAO/E,QAC9B,MACJ,IAAK,QACD8C,KAAKC,SAAS,CAAEvC,MAAOF,EAAEyE,OAAO/E,QAChC,MACJ,IAAK,OACD8C,KAAKC,SAAS,CAAEtC,KAAMH,EAAEyE,OAAO/E,QAC/B,MACJ,QACI0G,QAAQe,MAAM,uB,yCAINC,EAAWC,GACrBA,EAAUpH,MAAQuC,KAAKP,MAAMhC,KAAOoH,EAAUnH,QAAUsC,KAAKP,MAAM/B,OAASmH,EAAUlH,OAASqC,KAAKP,MAAM9B,MAC5GqC,KAAKwE,a,iCAKTxE,KAAK9B,MAAMmB,SAASW,KAAKP,S,+BAIzB,OACI,eAAC0B,EAAA,EAAK0B,IAAN,WACI,cAAC1B,EAAA,EAAK2D,MAAN,CAAYxD,GAAIwB,IAAKiC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAvC,SACI,eAAC9D,EAAA,EAAKC,QAAN,CAAcE,GAAG,SAASD,UAAQ,EAAChC,SAAUW,KAAKuE,YAAaW,cAAY,MAAMhI,MAAO8C,KAAKP,MAAMhC,IAAnG,UACA,wBAAQP,MAAM,GAAGiI,UAAQ,EAAC7B,cAAY,EAAtC,iBACCU,EAAM,EAAE,IAAI3F,KAAI,SAACZ,EAAKa,GAAN,OAAY,wBAAQE,UAAU,cAAsBtB,MAAQO,EAAhD,SAAwDA,GAAnBa,WAGtE,cAAC6C,EAAA,EAAK2D,MAAN,CAAYxD,GAAIwB,IAAKiC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAvC,SACI,eAAC9D,EAAA,EAAKC,QAAN,CAAcE,GAAG,SAASD,UAAQ,EAAChC,SAAUW,KAAKuE,YAAaW,cAAY,QAAQhI,MAAO8C,KAAKP,MAAM/B,MAArG,UACA,wBAAQR,MAAM,GAAGiI,UAAQ,EAAC7B,cAAY,EAAtC,mBACCS,EAAO1F,KAAI,SAACX,EAAOY,GAAR,OAAc,wBAAQE,UAAU,cAAwBtB,MAAQoB,EAAE,EAApD,SAA0DZ,GAArBY,EAAE,WAGrE,cAAC6C,EAAA,EAAK2D,MAAN,CAAYxD,GAAIwB,IAAKiC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAvC,SACI,eAAC9D,EAAA,EAAKC,QAAN,CAAcE,GAAG,SAASD,UAAQ,EAAChC,SAAUW,KAAKuE,YAAaW,cAAY,OAAOhI,MAAO8C,KAAKP,MAAM9B,KAApG,UACA,wBAAQT,MAAM,GAAGiI,UAAQ,EAAC7B,cAAY,EAAtC,kBACCU,EAAMhE,KAAKqE,UAAWrE,KAAKsE,aAAac,UAAU/G,KAAI,SAACV,EAAMW,GAAP,OAAa,wBAAQE,UAAU,cAAsBtB,MAAQS,EAAhD,SAAyDA,GAApBW,kB,GA1DpGqC,IAAMC,W,2BC1BzByE,EAAU,SAACnH,GAkDb,OACQ,qCACI,cAACiD,EAAA,EAAK0B,IAAN,UACI,eAAC1B,EAAA,EAAK2D,MAAN,CAAYxD,GAAIwB,IAAKiC,GAAI,GAAIO,UAAU,WAAvC,UACI,eAACnE,EAAA,EAAKoE,MAAN,wBAAsB,cAAC1E,EAAA,EAAD,OACtB,cAACM,EAAA,EAAKC,QAAN,CACIC,UAAQ,EACRmE,WAAS,EACTjH,KAAK,WACLgD,YAAY,YACZlC,SAAUnB,EAAMqG,YAChBrH,MAAOgB,EAAMuH,KAAKC,gBA5DjB,WACrB,IAAKxH,EAAMyH,KACP,OACI,qCACI,cAACxE,EAAA,EAAK0B,IAAN,UACI,eAAC1B,EAAA,EAAK2D,MAAN,CAAYxD,GAAIwB,IAAKiC,GAAI,GAAIO,UAAU,WAAvC,UACI,eAACnE,EAAA,EAAKoE,MAAN,uBAAqB,cAAC1E,EAAA,EAAD,OACrB,cAACM,EAAA,EAAKC,QAAN,CACIC,UAAQ,EACR9C,KAAK,WACLgD,YAAY,WACZlC,SAAUnB,EAAMqG,YAChBrH,MAAOgB,EAAMuH,KAAKG,gBAK9B,cAACzE,EAAA,EAAK0B,IAAN,UACI,eAAC1B,EAAA,EAAK2D,MAAN,CAAYxD,GAAIwB,IAAKiC,GAAI,GAAIO,UAAU,QAAvC,UACI,eAACnE,EAAA,EAAKoE,MAAN,oBAAkB,cAAC1E,EAAA,EAAD,OAClB,cAACM,EAAA,EAAKC,QAAN,CACIC,UAAQ,EACR9C,KAAK,QACLoE,KAAK,QACLpB,YAAY,QACZlC,SAAUnB,EAAMqG,YAChBrH,MAAOgB,EAAMuH,KAAKI,aAK9B,cAAC1E,EAAA,EAAK0B,IAAN,UACI,eAAC1B,EAAA,EAAK2D,MAAN,CAAYxD,GAAIwB,IAAKiC,GAAI,GAAIO,UAAU,WAAvC,UACI,eAACnE,EAAA,EAAKoE,MAAN,uBAAqB,cAAC1E,EAAA,EAAD,OACrB,cAACM,EAAA,EAAKC,QAAN,CACIC,UAAQ,EACR9C,KAAK,WACLoE,KAAK,WACLpB,YAAY,WACZlC,SAAUnB,EAAMqG,YAChBrH,MAAOgB,EAAMuH,KAAKK,mBAyBhCC,GAEF,cAAC5E,EAAA,EAAK0B,IAAN,UACI,eAAC1B,EAAA,EAAK2D,MAAN,CAAYxD,GAAIwB,IAAKiC,GAAI,GAAIO,UAAU,WAAvC,UACI,eAACnE,EAAA,EAAKoE,MAAN,uBAAqB,cAAC1E,EAAA,EAAD,OACrB,cAAC,EAAD,CACIxB,SAAUnB,EAAM8H,eAChBvI,IAAKS,EAAMuH,KAAKQ,SAASxI,IACzBC,MAAOQ,EAAMuH,KAAKQ,SAASvI,MAC3BC,KAAMO,EAAMuH,KAAKQ,SAAStI,gBAQhDuI,EAAU,SAAChI,GACb,OACI,qCACI,cAACiD,EAAA,EAAK0B,IAAN,UACI,eAAC1B,EAAA,EAAK2D,MAAN,CAAYxD,GAAIwB,IAAKiC,GAAI,GAAIvG,UAAU,OAAO8G,UAAU,YAAxD,UACI,cAACnE,EAAA,EAAKoE,MAAN,CAAY/G,UAAU,gBAAtB,wBACA,cAAC,EAAD,CACImE,KAAK,SACLpE,KAAK,YACLc,SAAUnB,EAAMiI,QAChB1E,QAASR,IACTqC,aAAcpF,EAAMuH,KAAKW,YAAYC,iBAKjD,cAAClF,EAAA,EAAK0B,IAAN,UACI,eAAC1B,EAAA,EAAK2D,MAAN,CAAYxD,GAAIwB,IAAKiC,GAAI,GAAIvG,UAAU,OAAO8G,UAAU,OAAxD,UACI,cAACnE,EAAA,EAAKoE,MAAN,CAAY/G,UAAU,gBAAtB,mBACA,cAAC,EAAD,CACImE,KAAK,QACLpE,KAAK,OACLc,SAAUnB,EAAMiI,QAChB7C,aAAcpF,EAAMuH,KAAKW,YAAYE,YAKjD,cAACnF,EAAA,EAAK0B,IAAN,UACI,eAAC1B,EAAA,EAAK2D,MAAN,CAAYxD,GAAIwB,IAAKiC,GAAI,GAAIvG,UAAU,OAAO8G,UAAU,YAAxD,UACI,cAACnE,EAAA,EAAKoE,MAAN,CAAY/G,UAAU,gBAAtB,wBACA,cAACG,EAAA,EAAD,CACIU,SAAUnB,EAAMkB,UAChBM,KAAM6G,IACN9F,MAAM,YACNV,YAAa7B,EAAMuH,KAAKe,qBAQ1CC,E,kDACF,WAAYvI,GAAQ,IAAD,sBAGf,IAAIwI,GAFJ,cAAMxI,IAEaA,MAAMwI,QACrBjB,EAAQiB,EAAW,CACnBd,SAAUc,EAAQd,SAClBF,SAAUgB,EAAQhB,SAClBI,SAAUY,EAAQZ,SAClBD,MAAOa,EAAQb,MACfI,SAAU,CACNxI,IAAKiJ,EAAQT,SAASxI,IACtBC,MAAOgJ,EAAQT,SAASvI,MACxBC,KAAM+I,EAAQT,SAAStI,MAE3ByI,YAAa,CACTC,UAAWK,EAAQN,YAAYC,UAC/BC,KAAMI,EAAQN,YAAYE,MAE9BE,UAAWE,EAAQF,WACnB,CACAZ,SAAU,GACVF,SAAU,GACVI,SAAU,GACVD,MAAO,GACPI,SAAU,CACNxI,IAAK,GACLC,MAAO,GACPC,KAAM,IAEVyI,YAAa,CACTC,UAAW,GACXC,KAAM,IAEVE,UAAW,IAjCA,OAoCf,EAAK/G,MAAQ,CACTgG,KAAMA,EACNkB,KAAM,GAGV,EAAKvH,UAAY,EAAKA,UAAUQ,KAAf,gBACjB,EAAKuG,QAAU,EAAKA,QAAQvG,KAAb,gBACf,EAAKoG,eAAiB,EAAKA,eAAepG,KAApB,gBACtB,EAAK2E,YAAc,EAAKA,YAAY3E,KAAjB,gBACnB,EAAKgH,MAAQ,EAAKA,MAAMhH,KAAX,gBACb,EAAKiH,MAAQ,EAAKA,MAAMjH,KAAX,gBA9CE,E,sDAiDTa,EAAOf,GAAO,IAAD,OACnB,OAAQe,GACJ,IAAK,YACDT,KAAKC,SAAS,CAACwF,KAAK,2BAAMzF,KAAKP,MAAMgG,MAAlB,IAAwBe,UAAW9G,MAAS,WAC3D,EAAKxB,MAAMqG,YAAY,EAAK9E,MAAMgG,SAEtC,MACJ,QACI7B,QAAQe,MAAM,wB,8BAIlBhC,EAAMU,GAAS,IAAD,OAClBrD,KAAKC,SAAS,CACVwF,KAAK,2BAAMzF,KAAKP,MAAMgG,MAAlB,IAAwBW,YAAY,2BAAMpG,KAAKP,MAAMgG,KAAKW,aAAvB,kBAAqCzD,EAAOU,QACpF,WACC,EAAKnF,MAAMqG,YAAY,EAAK9E,MAAMgG,W,qCAI3BqB,GAAO,IAAD,OACjB9G,KAAKC,SAAS,CAACwF,KAAK,2BAAMzF,KAAKP,MAAMgG,MAAlB,IAAwBQ,SAAUa,MAAS,WAC1D,EAAK5I,MAAMqG,YAAY,EAAK9E,MAAMgG,W,kCAI9BjI,GAAI,IAAD,OACXwC,KAAKC,SAAS,CAACwF,KAAK,2BAAMzF,KAAKP,MAAMgG,MAAlB,kBAAyBjI,EAAEyE,OAAO1D,KAAOf,EAAEyE,OAAO/E,UAAU,WAC3E,EAAKgB,MAAMqG,YAAY,EAAK9E,MAAMgG,W,8BAKlCzF,KAAK9B,MAAMzB,SAASuD,KAAKP,MAAMgG,OAC/BzF,KAAKC,SAAS,CAAE0G,KAAM3G,KAAKP,MAAMkH,KAAK,M,8BAKtC3G,KAAK9B,MAAMzB,SAASuD,KAAKP,MAAMgG,OAC/BzF,KAAKC,SAAS,CAAE0G,KAAM3G,KAAKP,MAAMkH,KAAK,M,+BAIpC,IAAD,OAyCL,OACA,mCAzCmB,WACf,OAAQ,EAAKlH,MAAMkH,MACf,KAAK,EACD,OACA,qCACI,cAAC,EAAD,CACIlB,KAAM,EAAKhG,MAAMgG,KACjBlB,YAAa,EAAKA,YAClByB,eAAgB,EAAKA,eACrBL,KAAM,EAAKzH,MAAMyH,OAErB,cAAC1H,EAAA,EAAD,CAAOG,OAAQ,EAAKF,MAAME,SAC1B,cAAC8E,EAAA,EAAD,CAAQxE,QAAQ,eAAea,QAAS,EAAKqH,MAA7C,qBAKR,KAAK,EACD,OACA,qCACI,cAAC,EAAD,CACInB,KAAM,EAAKhG,MAAMgG,KACjBrG,UAAW,EAAKA,UAChB+G,QAAS,EAAKA,QACdR,KAAM,EAAKzH,MAAMyH,OAErB,cAAC1H,EAAA,EAAD,CAAOG,OAAQ,EAAKF,MAAME,SAC1B,cAAC8E,EAAA,EAAD,CAAQxE,QAAQ,eAAeF,UAAU,eAAee,QAAS,EAAKsH,MAAtE,kBAGA,cAAC3D,EAAA,EAAD,CAAQxE,QAAQ,OAAOF,UAAU,eAAemE,KAAK,SAArD,SACM,EAAKzE,MAAMyH,KAAQ,YAAc,cAI/C,QACI,OAAQ,gEAKhBoB,S,GAxIWpG,IAAMC,WA0Vd6F","file":"static/js/1.7c621a79.chunk.js","sourcesContent":["const validate = (formData) => {\n    let invalidData = {};\n\n    const addToInvalid = (key, errMsg) => {\n        if (key in invalidData) {\n            invalidData[key].push(errMsg);\n        } else {\n            invalidData[key] = [errMsg];\n        }\n    };\n\n    const getCurrentYear = () => {\n        var dateObj = new Date();\n        var year = dateObj.getUTCFullYear();\n\n        return year;\n    };\n\n    for (const [key, value] of Object.entries(formData)) {\n        switch (key) {\n            case \"username\":\n                const usernameRegex = /[^a-zA-Z0-9]/g;\n                const usernameMatch = value.match(usernameRegex);\n                if (usernameMatch) {\n                    addToInvalid(\"username\", \"username contains special characters\");\n                }\n                if (value.length < 2 || value.length > 30) {\n                    addToInvalid(\"username\", \"username length must be 2-30 characters long\");\n                }\n                if (value.length === 0) {\n                    addToInvalid(\"username\", \"no username specified\");\n                }\n                break;\n\n            case \"fullname\":\n                const nameRegex = /^([a-zA-Z0-9]+|[a-zA-Z0-9]+\\s{1}[a-zA-Z0-9]{1,}|[a-zA-Z0-9]+\\s{1}[a-zA-Z0-9]{3,}\\s{1}[a-zA-Z0-9]{1,})$/;\n                const fullnameMatch = value.match(nameRegex);\n\n                if (!fullnameMatch) {\n                    addToInvalid(\"fullname\", \"unsupported name format\");\n                }\n                break;\n\n            case \"login\":\n                break;\n\n            case \"description\":\n                break;\n\n            case \"email\":\n                const emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n                const emailMatch = value.match(emailRegex);\n\n                if (!emailMatch) {\n                    addToInvalid(\"email\", \"invalid email format\");\n                }\n                break;\n\n            case \"password\":\n                if (value === undefined) break;\n                const passwordRegex = /^(?=.*[a-z])(?=.*\\d).{8,}$/;\n                const passwordMatch = value.match(passwordRegex);\n\n                if (!passwordMatch) {\n                    addToInvalid(\"password\", \"password must contain a minimum of eight characters, and at least one letter and one number:\")\n                }\n                break;\n            \n            case \"projectname\":\n                const projectRegex = /[^A-Za-z0-9\\s]/;\n                const projectMatch = value.match(projectRegex);\n                if (!value) {\n                    addToInvalid(\"projectname\", \"project name must not be empty\");\n                }\n                else if (projectMatch) {\n                    addToInvalid(\"projectname\", \"project name contains special characters\");\n                }\n                break;\n\n            case \"cucumber\":\n                if (value.some((e) => e === \"\")) {\n                    addToInvalid(\"formfield\", \"fill all the fields dumbass\");\n                }\n                break;\n\n            case \"interests\":\n                break;\n\n            case \"experiences\":\n                break;\n\n            case \"questions\":\n                break;\n\n            case \"tags\":\n                if ( value.length === 0 ) {\n                    addToInvalid(\"Tags\", \"at least one tag is required\");\n                }\n                break;\n\n            case \"birthday\":\n                //check birthday\n                const {day, month, year} = value;\n                const dayCount = [\n                    31,28,31,30,31,30,31,31,30,31,30,31,\n                ];\n\n                if (!day || !month || !year) {\n                    addToInvalid(\"birthday\", \"fill out all fields\")\n                }\n\n                //check day\n                if (month === 2) {\n                    // is leap year\n                    if (\n                        (0 === year % 4 && 0 !== year % 100) ||\n                        0 === year % 400\n                    ) {\n                        if (day > 29 || day < 1) {\n                            addToInvalid(\"birthday\", \"invalid day\");\n                        }\n                    } else {\n                        if (day > 28 || day < 1) {\n                            addToInvalid(\"birthday\", \"invalid day\");\n                        }\n                    }\n                } else {\n                    if (day > dayCount[month - 1]) {\n                        addToInvalid(\"birthday\", \"invalid day\");\n                    }\n                }\n\n                //check year\n                if (year > getCurrentYear()) {\n                    addToInvalid(\"birthday\", \"invalid year\");\n                }\n                break;\n\n            default:\n                addToInvalid(\"invalidKey\", [key, value]);\n                break;\n        }\n    }\n\n    // check if object is empty, returns true are there is no keys in err\n    let valid = Object.keys(invalidData).length === 0 && invalidData.constructor === Object;\n    return { valid: valid, invalidData: invalidData };\n};\n\nexport default validate;\n","import { Alert } from 'react-bootstrap';\n\n/* ==============================================================\n    <Error errors=Object />\n    Displays errors\n    \n=================================================================== */\n\nconst Error = (props) => {\n    let ErrorMessages = (Object.keys(props.errors).length === 0 && props.errors.constructor === Object)\n        ? ''\n        : Object.entries(props.errors)\n        .map(([key, name], i) => {\n            return (\n                <p key={i}>\n                    <p className=\"type\">{key}</p>\n                    <p className=\"msg\">{name.join(',\\n')}</p>\n                </p>\n            )\n        });\n    \n    return (\n        <>\n        { (ErrorMessages !== '')\n            ? (\n                <Alert variant='danger'>\n                    <pre>{ErrorMessages}</pre>\n                </Alert>\n            ) : (\n            <></>\n        )}\n        </>\n    );\n};\n\nexport default Error;","import React, { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"react-bootstrap\";\n\n/* ==============================================================\n    <Tags onChange={} group=String tags=Array [onAsDefault=Array] />\n    group: general grouping\n    label: individual label\n    onAsDefault: array of string of tags that is clicked as initalized\n    \n    onChange(group, tags) {\n        \n    }\n=================================================================== */\n\nconst Tag = (props) => {\n    const [clicked, setClick] = useState(props.startState);\n    const firstRender = useRef(true);\n\n    const handleClick = (e) => {\n        setClick(!clicked);\n    };\n\n    useEffect(() => {\n        if (firstRender.current) {\n            firstRender.current = false;\n        } else {\n            const tagChange = props.onChange;\n            tagChange(props.label, clicked);\n        }\n    }, [clicked, props.label, props.onChange]);\n\n    return (\n        <Button\n            className=\"button-group\"\n            variant={!clicked ? \"outline-earthbrown\" : \"earthbrown\"}\n            onClick={handleClick}\n        >\n            {props.label}\n        </Button>\n    );\n};\n\nclass Tags extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tags: [],\n        };\n        this.initialState = {};\n        this.tagChange = this.tagChange.bind(this);\n        this.props.tags.forEach((elem) => (this.initialState[elem] = false));\n        this.props.onAsDefault?.forEach((elem) => {\n            this.initialState[elem] = true;\n        });\n    }\n\n    // set initial state\n    componentDidMount() {\n        if ( this.props.onAsDefault && this.props.onAsDefault.length > 0 )\n        this.setState({ tags: this.props.onAsDefault });\n    }\n\n    tagChange(label, checked) {\n        let newTags;\n        const modifyTags = (tags) => {\n            let idx = tags.findIndex((e) => e === label);\n            return checked\n                ? tags.concat(label)\n                : tags.slice(0, idx).concat(tags.slice(idx + 1, tags.length));\n        };\n        newTags = modifyTags(this.state.tags);\n        this.setState({ tags: newTags }, () => {\n            this.props.onChange(this.props.group, this.state.tags);\n        });\n    }\n\n    render() {\n        let TagButtons = [];\n        for (const key in this.initialState) {\n            TagButtons.push(\n                <Tag\n                    onChange={this.tagChange}\n                    group={this.props.group}\n                    label={key}\n                    key={key}\n                    startState={this.initialState[key]}\n                />\n            );\n        }\n        // const TagButtons = this.props.tags.map((item, i) => {\n        //     const startState = this.props.onAsDefault?.includes(item) || false;\n        //     return (\n        //         <Tag onChange={this.tagChange} group={this.props.group} label={item} key={i} startState={startState} />\n        //     );\n        // });\n\n        return <>{TagButtons}</>;\n    }\n}\n\nexport default Tags;","const Required = (props) => {\n    return (\n        <span style={{color: \"red\"}}>*</span>\n    )\n}\n\nexport default Required;","const TagsList = ['Website Design', 'E-Sports', 'Video Editing', 'Photography', 'Transportation', 'Tourism', 'Technology', 'Supplier', 'Subscription', 'Store', 'Sports', 'Software', 'Pets', 'Organization', 'Logistics', 'Insurance', 'Health', 'Games', 'Food', 'Fintech', 'Farm', 'Environment', 'Entertainment', 'Education', 'eCommerce', 'Delivery', 'Dealer', 'Construction', 'Cafe', 'Beauty', 'Audit', 'Art', 'Animal', 'AI', 'Agency'];\n\nconst EducationOptions = ['Middle School', 'High School', 'University', 'College'];\n\nexport { TagsList, EducationOptions }; ","import React from 'react';\nimport { Form, Button, Col, InputGroup } from 'react-bootstrap';\nimport { FaWindowClose } from \"react-icons/fa\";\n\n/* ==============================================================\n    <InputFieldGroup name=String onChange={} type=input[, select] options=[options] [defaultValue=Array]\n\n    defaultValue = [{title: String, value: String}, ...]\n    onChange(name, fields) {\n        this.setState({ experiences: { ...this.state.experiences, [type]: fields } });\n        \n        fields = {\n            title: String,\n            value: String\n        }\n    }\n=================================================================== */\n\nconst InputField = (props) => {\n    return (\n        <Form.Control\n            required\n            as=\"input\"\n            value={props.value}\n            onChange={props.onChange}\n            placeholder=\"Field\"\n        >\n        </Form.Control>\n    );\n}\n\nconst SelectField = (props) => {\n    return (\n        <>\n            <Form.Control\n                as=\"select\"\n                onChange={props.onChange}\n            >\n                {props.options}\n            </Form.Control>\n        </>\n    );\n}\n\nclass FormInputGroup extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            uID: this.props.uID,\n            title: this.props.title,\n            value: this.props.value\n        }\n\n        this.titleChange = this.titleChange.bind(this);\n        this.valueChange = this.valueChange.bind(this);\n        this.sendDelete = this.sendDelete.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n    }\n\n    titleChange(e) {\n        this.setState({ title: e.target.value }, () => {\n            this.props.handleFieldChange(this.state);\n        });\n    }\n\n    valueChange(e) {\n        this.setState({ value: e.target.value }, () => {\n            this.props.handleFieldChange(this.state);\n        });\n    }\n\n    sendDelete(e) {\n        e.preventDefault();\n        this.props.handleDelete(this.state);\n    }\n\n    onKeyDown(e) {\n        if (e.keyCode === 9) this.props.addField(); // Tab\n    }\n\n    componentDidMount() {\n        this.expField.focus();\n        this.expField.addEventListener('keydown', this.onKeyDown, false);\n    }\n\n    componentWillUnmount() {\n        this.expField.removeEventListener('keydown', this.onKeyDown, false);\n    }\n    \n    render() {\n        let options;\n        if (this.props.type === 'select') {\n            options = this.props.options.map((option, i) => <option key={i}>{option}</option>);\n        }\n\n        return (\n            <Form.Row>\n                <Col xs={10}>\n                    <InputGroup>\n                        { (this.props.type === 'select')\n                            ? <SelectField onChange={this.titleChange} options={options} />\n                            : <InputField value={this.state.title} onChange={this.titleChange} />\n                        }\n                        <Form.Control\n                            required\n                            ref={elem => this.expField = elem}\n                            as=\"input\"\n                            value={this.state.value}\n                            onChange={this.valueChange}\n                            placeholder=\"Field\"\n                        />\n                    </InputGroup>\n                </Col>\n                <Col xs={2}>\n                    <Button variant=\"danger\" onClick={this.sendDelete}>\n                        <FaWindowClose size={16} />\n                    </Button>\n                </Col>\n            </Form.Row>\n        );\n    }\n}\n\nclass InputFieldGroup extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            fields: this.props.defaultValue || [],\n            IDCount: 0\n        }\n        this.handleAdd = this.handleAdd.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n        this.handleFieldChange = this.handleFieldChange.bind(this);\n    }\n\n    handleAdd(e) {\n        let newUID = this.state.IDCount + 1;\n        let placeholder = this.props.options ? this.props.options[0] : 'Planty';\n        let newFields = [...this.state.fields].concat({\n            title: placeholder, value: '', uID: newUID\n        });\n        \n        this.setState({ fields: newFields, IDCount: newUID }, () => {\n            this.props.onChange(this.props.name, this.state.fields);\n        });\n    }\n    \n    handleDelete(field) {\n        let newFields = [...this.state.fields];\n        for (let i = 0; i < newFields.length; i++) {\n            if (field[\"uID\"] === this.state.fields[i][\"uID\"]) {\n                newFields = newFields.slice(0, i).concat(newFields.slice(i+1, newFields.length));\n            }\n        }\n\n        this.setState({ fields: newFields }, () => {\n            console.log(this.state.fields)\n            this.props.onChange(this.props.name, this.state.fields);\n        });\n    }\n\n    handleFieldChange(field) {\n        let newFields = [...this.state.fields];\n        \n        for (let e in newFields) {\n            if (field[\"uID\"] === this.state.fields[e][\"uID\"]) {\n                newFields[e] = field;\n            }\n        }\n\n        this.setState({ fields: newFields }, () => {\n            this.props.onChange(this.props.name, this.state.fields);\n        });\n    }\n    \n    render() {\n        let fieldElems = this.state.fields.map((field, i) => {\n            return <FormInputGroup\n                key={i}\n                uID={field.uID}\n                title={field.title}\n                value={field.value}\n                handleFieldChange={this.handleFieldChange}    \n                handleDelete={this.handleDelete}\n                options={this.props.options}\n                type={this.props.type}\n                addField={this.handleAdd}\n            />;\n        });\n        return (\n            <>\n                <Button variant=\"danger\" onClick={this.handleAdd}>Add</Button>\n                {fieldElems}\n            </>\n        );\n    }\n}\n\nexport default InputFieldGroup;","import { Form, Col } from 'react-bootstrap';\nimport React from 'react';\n\n/* ==============================================================\n    <DatePicker onChange={} />\n\n    onChange(date) {\n        date = {\n            day: Number,\n            month: Number,\n            year: Number\n        }\n    }\n=================================================================== */\n\nconst months = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\nfunction range(start, end) {\n    var ans = [];\n    for (let i = start; i <= end; i++) {\n        ans.push(i);\n    }\n    return ans;\n}\n\nconst getCurrentYear = () => {\n    var dateObj = new Date();\n    var year = dateObj.getUTCFullYear();\n\n    return year;\n};\n\nclass DatePicker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            day: this.props.day,\n            month: this.props.month,\n            year: this.props.year\n        }\n        this.startYear = 1920;\n        this.currentYear = getCurrentYear();\n        this.inputChange = this.inputChange.bind(this);\n        this.sendData = this.sendData.bind(this);\n    }\n\n    inputChange(e) {\n        switch (e.target.dataset.format) {\n            case('day'):\n                this.setState({ day: e.target.value });   \n                break;\n            case('month'):\n                this.setState({ month: e.target.value });\n                break;\n            case('year'):\n                this.setState({ year: e.target.value });\n                break;\n            default:\n                console.error('unexpected input');\n        }\n    }\n\n    componentDidUpdate (prevProps, prevState) {\n        if (!(prevState.day === this.state.day && prevState.month === this.state.month && prevState.year === this.state.year)) {\n            this.sendData();\n        }\n    }\n\n    sendData() {\n        this.props.onChange(this.state);\n    }\n\n    render() {\n        return (\n            <Form.Row>\n                <Form.Group as={Col} sm={4} md={2} lg={1} >\n                    <Form.Control as=\"select\" required onChange={this.inputChange} data-format=\"day\" value={this.state.day} >\n                    <option value=\"\" disabled defaultValue>Day</option>\n                    {range(1,31).map((day, i) => <option className=\"form-select\" key={i} value={ day }>{ day }</option>)}\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group as={Col} sm={4} md={4} lg={2} >\n                    <Form.Control as=\"select\" required onChange={this.inputChange} data-format=\"month\" value={this.state.month} >\n                    <option value=\"\" disabled defaultValue>Month</option>\n                    {months.map((month, i) => <option className=\"form-select\" key={i+1} value={ i+1 }>{ month }</option>)}\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group as={Col} sm={4} md={2} lg={1} >\n                    <Form.Control as=\"select\" required onChange={this.inputChange} data-format=\"year\" value={this.state.year} >\n                    <option value=\"\" disabled defaultValue>Year</option>\n                    {range(this.startYear, this.currentYear).reverse().map((year, i) => <option className=\"form-select\" key={i} value={ year }>{ year }</option>)}\n                    </Form.Control>\n                </Form.Group>\n            </Form.Row>\n        );\n    }\n}\n\nexport default DatePicker;","import React from 'react';\nimport { Col, Form, Button } from 'react-bootstrap';\nimport Tags from '../Tag';\nimport ExperienceGroup from '../ExpandableFields';\nimport DatePicker from '../DatePicker';\nimport Error from \"../Error\";\nimport Required from '../Required';\nimport { TagsList as Interests, EducationOptions } from '../../Services/Mock';\n\nconst PageOne = (props) => {\n    const UserNamePassword = () => {\n        if (!props.edit) {\n            return (\n                <>\n                    <Form.Row>\n                        <Form.Group as={Col} sm={12} controlId=\"username\">\n                            <Form.Label>Username <Required /></Form.Label>\n                            <Form.Control\n                                required\n                                name=\"username\"\n                                placeholder=\"Username\"\n                                onChange={props.inputChange}\n                                value={props.data.username}\n                            />\n                        </Form.Group>\n                    </Form.Row>\n\n                    <Form.Row>\n                        <Form.Group as={Col} sm={12} controlId=\"email\">\n                            <Form.Label>Email <Required /></Form.Label>\n                            <Form.Control\n                                required\n                                name=\"email\"\n                                type=\"email\"\n                                placeholder=\"Email\"\n                                onChange={props.inputChange}\n                                value={props.data.email}\n                            />\n                        </Form.Group>\n                    </Form.Row>\n\n                    <Form.Row>\n                        <Form.Group as={Col} sm={12} controlId=\"password\">\n                            <Form.Label>Password <Required /></Form.Label>\n                            <Form.Control\n                                required\n                                name=\"password\"\n                                type=\"password\"\n                                placeholder=\"Password\"\n                                onChange={props.inputChange}\n                                value={props.data.password}\n                            />\n                        </Form.Group>\n                    </Form.Row>\n                </>\n            );\n        }\n    }\n\n    return (\n            <>\n                <Form.Row>\n                    <Form.Group as={Col} sm={12} controlId=\"fullname\">\n                        <Form.Label>Full name <Required /></Form.Label>\n                        <Form.Control\n                            required\n                            autoFocus\n                            name=\"fullname\"\n                            placeholder=\"Full Name\"\n                            onChange={props.inputChange}\n                            value={props.data.fullname}\n                        />\n                    </Form.Group>\n                </Form.Row>\n\n                { UserNamePassword() }\n\n                <Form.Row>\n                    <Form.Group as={Col} sm={12} controlId=\"birthday\">\n                        <Form.Label>Birthday <Required /></Form.Label>\n                        <DatePicker\n                            onChange={props.handleBirthday}\n                            day={props.data.birthday.day}\n                            month={props.data.birthday.month}\n                            year={props.data.birthday.year}\n                        />\n                    </Form.Group>\n                </Form.Row>\n        </>\n    );\n}\n\nconst PageTwo = (props) => {\n    return (\n        <>\n            <Form.Row>\n                <Form.Group as={Col} sm={12} className=\"mb-3\" controlId=\"education\">\n                    <Form.Label className=\"display-block\">Education:</Form.Label>\n                    <ExperienceGroup\n                        type=\"select\"\n                        name=\"education\"\n                        onChange={props.setInfo}\n                        options={EducationOptions}\n                        defaultValue={props.data.experiences.education}\n                    />\n                </Form.Group>\n            </Form.Row>\n\n            <Form.Row>\n                <Form.Group as={Col} sm={12} className=\"mb-3\" controlId=\"work\">\n                    <Form.Label className=\"display-block\">Work:</Form.Label>\n                    <ExperienceGroup\n                        type=\"input\"\n                        name=\"work\"\n                        onChange={props.setInfo}\n                        defaultValue={props.data.experiences.work}\n                    />\n                </Form.Group>\n            </Form.Row>\n\n            <Form.Row>\n                <Form.Group as={Col} sm={12} className=\"mb-3\" controlId=\"interests\">\n                    <Form.Label className=\"display-block\">Interests:</Form.Label>\n                    <Tags\n                        onChange={props.tagChange}\n                        tags={Interests}\n                        group=\"interests\"\n                        onAsDefault={props.data.interests}\n                    />\n                </Form.Group>\n            </Form.Row>\n        </>\n    );\n}\n\nclass UserForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        let oldData = this.props.oldData;\n        let data = (oldData) ? {\n            username: oldData.username,\n            fullname: oldData.fullname,\n            password: oldData.password,\n            email: oldData.email,\n            birthday: {\n                day: oldData.birthday.day,\n                month: oldData.birthday.month,\n                year: oldData.birthday.year\n            },\n            experiences: {\n                education: oldData.experiences.education,\n                work: oldData.experiences.work\n            },\n            interests: oldData.interests\n        } : {\n            username: \"\",\n            fullname: \"\",\n            password: \"\",\n            email: \"\",\n            birthday: {\n                day: \"\",\n                month: \"\",\n                year: \"\"\n            },\n            experiences: {\n                education: [],\n                work: []\n            },\n            interests: []\n        }\n\n        this.state = {\n            data: data,\n            page: 1\n        }\n\n        this.tagChange = this.tagChange.bind(this);\n        this.setInfo = this.setInfo.bind(this);\n        this.handleBirthday = this.handleBirthday.bind(this);\n        this.inputChange = this.inputChange.bind(this);\n        this._next = this._next.bind(this);\n        this._prev = this._prev.bind(this);\n    }\n\n    tagChange(group, tags) {\n        switch (group) {\n            case \"interests\":\n                this.setState({data: { ...this.state.data, interests: tags }}, () => {\n                    this.props.inputChange(this.state.data);\n                });\n                break;\n            default:\n                console.error(\"unknown tag group\");\n        }\n    }\n\n    setInfo(type, fields) {\n        this.setState({\n            data: { ...this.state.data, experiences: { ...this.state.data.experiences, [type]: fields }},\n        }, () => {\n            this.props.inputChange(this.state.data);\n        });\n    }\n\n    handleBirthday(date) {\n        this.setState({data: { ...this.state.data, birthday: date }}, () => {\n            this.props.inputChange(this.state.data);\n        });\n    }\n\n    inputChange(e) {\n        this.setState({data: { ...this.state.data, [e.target.name]: e.target.value }}, () => {\n            this.props.inputChange(this.state.data);\n        });\n    }\n\n    _next() {\n        if (this.props.validate(this.state.data)) {\n            this.setState({ page: this.state.page+1 });\n        }\n    }\n\n    _prev() {\n        if (this.props.validate(this.state.data)) {\n            this.setState({ page: this.state.page-1 });\n        }\n    }\n\n    render() {\n        const RenderPage = () => {\n            switch (this.state.page) {\n                case 1:\n                    return (\n                    <>\n                        <PageOne\n                            data={this.state.data}\n                            inputChange={this.inputChange}\n                            handleBirthday={this.handleBirthday}\n                            edit={this.props.edit}\n                        />\n                        <Error errors={this.props.errors} />\n                        <Button variant=\"outline-info\" onClick={this._next}>\n                            Next\n                        </Button>\n                    </>\n                    );\n                case 2:\n                    return (\n                    <>\n                        <PageTwo\n                            data={this.state.data}\n                            tagChange={this.tagChange}\n                            setInfo={this.setInfo}\n                            edit={this.props.edit}\n                        />\n                        <Error errors={this.props.errors} />\n                        <Button variant=\"outline-info\" className=\"button-group\" onClick={this._prev}>\n                            Back\n                        </Button>\n                        <Button variant=\"info\" className=\"button-group\" type=\"submit\">\n                            {(this.props.edit) ? \"Save Edit\" : \"Create\"}\n                        </Button>\n                    </>\n                    );\n                default:\n                    return (<span>Can't find the current page</span>)                      \n            }\n        }\n        \n        return (\n        <>{ RenderPage() }</>\n        );\n    }\n}\n\n/*\n\nclass UserForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        let oldData = this.props.oldData;\n        this.state = (oldData) ? {\n            username: oldData.username,\n            fullname: oldData.fullname,\n            password: oldData.password,\n            email: oldData.email,\n            birthday: {\n                day: oldData.birthday.day,\n                month: oldData.birthday.month,\n                year: oldData.birthday.year\n            },\n            experiences: {\n                education: oldData.experiences.education,\n                work: oldData.experiences.work\n            },\n            interests: oldData.interests\n        } : {\n            username: \"\",\n            fullname: \"\",\n            password: \"\",\n            email: \"\",\n            birthday: {\n                day: \"\",\n                month: \"\",\n                year: \"\"\n            },\n            experiences: {\n                education: [],\n                work: []\n            },\n            interests: []\n        }\n\n        this.tagChange = this.tagChange.bind(this);\n        this.setInfo = this.setInfo.bind(this);\n        this.handleBirthday = this.handleBirthday.bind(this);\n        this.inputChange = this.inputChange.bind(this);\n    }\n\n    tagChange(group, tags) {\n        switch (group) {\n            case \"interests\":\n                this.setState({ interests: tags }, () => {\n                    this.props.inputChange(this.state);\n                });\n                break;\n            default:\n                console.error(\"unknown tag group\");\n        }\n    }\n\n    setInfo(type, fields) {\n        this.setState({\n            experiences: { ...this.state.experiences, [type]: fields },\n        }, () => {\n            this.props.inputChange(this.state);\n        });\n    }\n\n    handleBirthday(date) {\n        this.setState({ birthday: date }, () => {\n            this.props.inputChange(this.state);\n        });\n    }\n\n    inputChange(e) {\n        this.setState({ [e.target.name]: e.target.value }, () => {\n            this.props.inputChange(this.state);\n        });\n    }\n\n    render() {\n        const UserNamePassword = () => {\n            if (!this.props.edit) {\n                return (\n                    <>\n                        <Form.Row>\n                            <Form.Group as={Col} sm={12} controlId=\"username\">\n                                <Form.Label>Username</Form.Label>\n                                <Form.Control\n                                    required\n                                    autoFocus\n                                    name=\"username\"\n                                    placeholder=\"Username\"\n                                    onChange={this.inputChange}\n                                    value={this.state.username}\n                                />\n                            </Form.Group>\n                        </Form.Row>\n\n                        <Form.Row>\n                            <Form.Group as={Col} sm={12} controlId=\"email\">\n                                <Form.Label>Email</Form.Label>\n                                <Form.Control\n                                    required\n                                    name=\"email\"\n                                    type=\"email\"\n                                    placeholder=\"Email\"\n                                    onChange={this.inputChange}\n                                    value={this.state.email}\n                                />\n                            </Form.Group>\n                        </Form.Row>\n\n                        <Form.Row>\n                            <Form.Group as={Col} sm={12} controlId=\"password\">\n                                <Form.Label>Password</Form.Label>\n                                <Form.Control\n                                    required\n                                    name=\"password\"\n                                    type=\"password\"\n                                    placeholder=\"Password\"\n                                    onChange={this.inputChange}\n                                    value={this.state.password}\n                                />\n                            </Form.Group>\n                        </Form.Row>\n                    </>\n                );\n            }\n        }\n        return (\n            <>\n                <Form.Row>\n                    <Form.Group as={Col} sm={12} controlId=\"fullname\">\n                        <Form.Label>Full name</Form.Label>\n                        <Form.Control\n                            required\n                            name=\"fullname\"\n                            placeholder=\"Full Name\"\n                            onChange={this.inputChange}\n                            value={this.state.fullname}\n                        />\n                    </Form.Group>\n                </Form.Row>\n\n                { UserNamePassword() }\n\n                <Form.Row>\n                    <Form.Group as={Col} sm={12} controlId=\"birthday\">\n                        <Form.Label>Birthday</Form.Label>\n                        <DatePicker\n                            onChange={this.handleBirthday}\n                            day={this.state.birthday.day}\n                            month={this.state.birthday.month}\n                            year={this.state.birthday.year}\n                        />\n                    </Form.Group>\n                </Form.Row>\n\n                <Form.Row>\n                    <Form.Group as={Col} sm={12} className=\"mb-3\" controlId=\"education\">\n                        <Form.Label>Education</Form.Label>\n                        <ExperienceGroup\n                            type=\"select\"\n                            name=\"education\"\n                            onChange={this.setInfo}\n                            options={EducationOptions}\n                            defaultValue={this.state.experiences.education}\n                        />\n                    </Form.Group>\n                </Form.Row>\n\n                <Form.Row>\n                    <Form.Group as={Col} sm={12} className=\"mb-3\" controlId=\"work\">\n                        <Form.Label>Work</Form.Label>\n                        <ExperienceGroup\n                            type=\"input\"\n                            name=\"work\"\n                            onChange={this.setInfo}\n                            defaultValue={this.state.experiences.work}\n                        />\n                    </Form.Group>\n                </Form.Row>\n\n                <Form.Row>\n                    <Form.Group as={Col} sm={12} className=\"mb-3\" controlId=\"interests\">\n                        <Form.Label>Interests</Form.Label>\n                        <Tags\n                            onChange={this.tagChange}\n                            tags={Interests}\n                            group=\"interests\"\n                            onAsDefault={this.state.interests}\n                        />\n                    </Form.Group>\n                </Form.Row>\n\n                <Error errors={this.props.errors} />\n\n                <Button variant=\"info\" type=\"submit\">\n                    {(this.props.edit) ? \"Save Edit\" : \"Create\"}\n                </Button>\n            </>\n        );\n    }\n}\n\n*/\n\nexport default UserForm;"],"sourceRoot":""}