{"version":3,"sources":["Services/Validate.js","Components/Error.js","Components/Tag.js","Components/Required.js","Services/Mock.js","../node_modules/react-bootstrap/esm/InputGroup.js","Components/ExpandableFields.js","Components/DatePicker.js","Components/Form/User.js"],"names":["validate","formData","invalidData","addToInvalid","key","errMsg","push","Object","entries","value","match","length","undefined","projectMatch","some","e","day","month","year","Date","getUTCFullYear","valid","keys","constructor","Error","props","ErrorMessages","errors","map","i","name","join","variant","Tag","useState","startState","clicked","setClick","firstRender","useRef","useEffect","current","tagChange","onChange","label","className","onClick","Tags","state","tags","initialState","bind","forEach","elem","onAsDefault","this","setState","checked","newTags","idx","findIndex","concat","slice","modifyTags","group","TagButtons","React","Component","Required","style","color","TagsList","EducationOptions","InputGroupAppend","createWithBsPrefix","InputGroupPrepend","InputGroupText","InputGroup","forwardRef","_ref","ref","bsPrefix","size","_ref$as","as","_objectWithoutPropertiesLoose","useBootstrapPrefix","createElement","_extends","classNames","displayName","InputGroupWithExtras","Text","Radio","type","Checkbox","Append","Prepend","InputField","Form","Control","required","placeholder","SelectField","options","FormInputGroup","uID","title","titleChange","valueChange","sendDelete","onKeyDown","target","handleFieldChange","preventDefault","handleDelete","keyCode","addField","expField","focus","addEventListener","removeEventListener","option","Row","Col","xs","Button","InputFieldGroup","fields","defaultValue","IDCount","handleAdd","newUID","newFields","field","console","log","fieldElems","months","range","start","end","ans","DatePicker","startYear","currentYear","inputChange","sendData","dataset","format","error","prevProps","prevState","Group","sm","md","lg","data-format","disabled","reverse","PageOne","controlId","Label","data","fullname","edit","autoFocus","username","email","password","UserNamePassword","handleBirthday","birthday","PageTwo","setInfo","experiences","education","work","Interests","interests","UserForm","oldData","page","_next","_prev","date","RenderPage"],"mappings":"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","file":"static/js/2.24232b4f.chunk.js","sourcesContent":["const validate = (formData) => {\n    let invalidData = {};\n\n    const addToInvalid = (key, errMsg) => {\n        if (key in invalidData) {\n            invalidData[key].push(errMsg);\n        } else {\n            invalidData[key] = [errMsg];\n        }\n    };\n\n    const getCurrentYear = () => {\n        var dateObj = new Date();\n        var year = dateObj.getUTCFullYear();\n\n        return year;\n    };\n\n    for (const [key, value] of Object.entries(formData)) {\n        switch (key) {\n            case \"username\":\n                const usernameRegex = /[^a-zA-Z0-9]/g;\n                const usernameMatch = value.match(usernameRegex);\n                if (usernameMatch) {\n                    addToInvalid(\"username\", \"username contains special characters\");\n                }\n                if (value.length < 2 || value.length > 30) {\n                    addToInvalid(\"username\", \"username length must be 2-30 characters long\");\n                }\n                if (value.length === 0) {\n                    addToInvalid(\"username\", \"no username specified\");\n                }\n                break;\n\n            case \"fullname\":\n                const nameRegex = /^([a-zA-Z0-9]+|[a-zA-Z0-9]+\\s{1}[a-zA-Z0-9]{1,}|[a-zA-Z0-9]+\\s{1}[a-zA-Z0-9]{3,}\\s{1}[a-zA-Z0-9]{1,})$/;\n                const fullnameMatch = value.match(nameRegex);\n\n                if (!fullnameMatch) {\n                    addToInvalid(\"fullname\", \"unsupported name format\");\n                }\n                break;\n\n            case \"login\":\n                break;\n\n            case \"description\":\n                break;\n\n            case \"email\":\n                const emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n                const emailMatch = value.match(emailRegex);\n\n                if (!emailMatch) {\n                    addToInvalid(\"email\", \"invalid email format\");\n                }\n                break;\n\n            case \"password\":\n                if (value === undefined) break;\n                const passwordRegex = /^(?=.*[a-z])(?=.*\\d).{8,}$/;\n                const passwordMatch = value.match(passwordRegex);\n\n                if (!passwordMatch) {\n                    addToInvalid(\"password\", \"password must contain a minimum of eight characters, and at least one letter and one number:\")\n                }\n                break;\n            \n            case \"projectname\":\n                const projectRegex = /[^A-Za-z0-9\\s]/;\n                const projectMatch = value.match(projectRegex);\n                if (!value) {\n                    addToInvalid(\"projectname\", \"project name must not be empty\");\n                }\n                else if (projectMatch) {\n                    addToInvalid(\"projectname\", \"project name contains special characters\");\n                }\n                break;\n\n            case \"cucumber\":\n                if (value.some((e) => e === \"\")) {\n                    addToInvalid(\"formfield\", \"fill all the fields dumbass\");\n                }\n                break;\n\n            case \"interests\":\n                break;\n\n            case \"experiences\":\n                break;\n\n            case \"questions\":\n                break;\n\n            case \"tags\":\n                if ( value.length === 0 ) {\n                    addToInvalid(\"Tags\", \"at least one tag is required\");\n                }\n                break;\n\n            case \"birthday\":\n                //check birthday\n                const {day, month, year} = value;\n                const dayCount = [\n                    31,28,31,30,31,30,31,31,30,31,30,31,\n                ];\n\n                if (!day || !month || !year) {\n                    addToInvalid(\"birthday\", \"fill out all fields\")\n                }\n\n                //check day\n                if (month === 2) {\n                    // is leap year\n                    if (\n                        (0 === year % 4 && 0 !== year % 100) ||\n                        0 === year % 400\n                    ) {\n                        if (day > 29 || day < 1) {\n                            addToInvalid(\"birthday\", \"invalid day\");\n                        }\n                    } else {\n                        if (day > 28 || day < 1) {\n                            addToInvalid(\"birthday\", \"invalid day\");\n                        }\n                    }\n                } else {\n                    if (day > dayCount[month - 1]) {\n                        addToInvalid(\"birthday\", \"invalid day\");\n                    }\n                }\n\n                //check year\n                if (year > getCurrentYear()) {\n                    addToInvalid(\"birthday\", \"invalid year\");\n                }\n                break;\n\n            default:\n                addToInvalid(\"invalidKey\", [key, value]);\n                break;\n        }\n    }\n\n    // check if object is empty, returns true are there is no keys in err\n    let valid = Object.keys(invalidData).length === 0 && invalidData.constructor === Object;\n    return { valid: valid, invalidData: invalidData };\n};\n\nexport default validate;\n","import { Alert } from 'react-bootstrap';\n\n/* ==============================================================\n    <Error errors=Object />\n    Displays errors\n    \n=================================================================== */\n\nconst Error = (props) => {\n    let ErrorMessages = (Object.keys(props.errors).length === 0 && props.errors.constructor === Object)\n        ? ''\n        : Object.entries(props.errors)\n        .map(([key, name], i) => {\n            return (\n                <p key={i}>\n                    {`${key}:\\n${name.join(',\\n')}`}\n                </p>\n            )\n        });\n    \n    return (\n        <>\n        { (ErrorMessages !== '')\n            ? (\n                <Alert variant='danger'>\n                    <pre>{ErrorMessages}</pre>\n                </Alert>\n            ) : (\n            <></>\n        )}\n        </>\n    );\n};\n\nexport default Error;","import React, { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"react-bootstrap\";\n\n/* ==============================================================\n    <Tags onChange={} group=String tags=Array [onAsDefault=Array] />\n    group: general grouping\n    label: individual label\n    onAsDefault: array of string of tags that is clicked as initalized\n    \n    onChange(group, tags) {\n        \n    }\n=================================================================== */\n\nconst Tag = (props) => {\n    const [clicked, setClick] = useState(props.startState);\n    const firstRender = useRef(true);\n\n    const handleClick = (e) => {\n        setClick(!clicked);\n    };\n\n    useEffect(() => {\n        if (firstRender.current) {\n            firstRender.current = false;\n        } else {\n            const tagChange = props.onChange;\n            tagChange(props.label, clicked);\n        }\n    }, [clicked, props.label, props.onChange]);\n\n    return (\n        <Button\n            className=\"m-1\"\n            variant={!clicked ? \"outline-earthbrown\" : \"earthbrown\"}\n            onClick={handleClick}\n        >\n            {props.label}\n        </Button>\n    );\n};\n\nclass Tags extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tags: [],\n        };\n        this.initialState = {};\n        this.tagChange = this.tagChange.bind(this);\n        this.props.tags.forEach((elem) => (this.initialState[elem] = false));\n        this.props.onAsDefault?.forEach((elem) => {\n            this.initialState[elem] = true;\n        });\n    }\n\n    // set initial state\n    componentDidMount() {\n        if ( this.props.onAsDefault && this.props.onAsDefault.length > 0 )\n        this.setState({ tags: this.props.onAsDefault });\n    }\n\n    tagChange(label, checked) {\n        let newTags;\n        const modifyTags = (tags) => {\n            let idx = tags.findIndex((e) => e === label);\n            return checked\n                ? tags.concat(label)\n                : tags.slice(0, idx).concat(tags.slice(idx + 1, tags.length));\n        };\n        newTags = modifyTags(this.state.tags);\n        this.setState({ tags: newTags }, () => {\n            this.props.onChange(this.props.group, this.state.tags);\n        });\n    }\n\n    render() {\n        let TagButtons = [];\n        for (const key in this.initialState) {\n            TagButtons.push(\n                <Tag\n                    onChange={this.tagChange}\n                    group={this.props.group}\n                    label={key}\n                    key={key}\n                    startState={this.initialState[key]}\n                />\n            );\n        }\n        // const TagButtons = this.props.tags.map((item, i) => {\n        //     const startState = this.props.onAsDefault?.includes(item) || false;\n        //     return (\n        //         <Tag onChange={this.tagChange} group={this.props.group} label={item} key={i} startState={startState} />\n        //     );\n        // });\n\n        return <>{TagButtons}</>;\n    }\n}\n\nexport default Tags;","const Required = (props) => {\n    return (\n        <span style={{color: \"red\"}}>*</span>\n    )\n}\n\nexport default Required;","const TagsList = ['Website Design', 'E-Sports', 'Video Editing', 'Photography', 'Transportation', 'Tourism', 'Technology', 'Supplier', 'Subscription', 'Store', 'Sports', 'Software', 'Pets', 'Organization', 'Logistics', 'Insurance', 'Health', 'Games', 'Food', 'Fintech', 'Farm', 'Environment', 'Entertainment', 'Education', 'eCommerce', 'Delivery', 'Dealer', 'Construction', 'Cafe', 'Beauty', 'Audit', 'Art', 'Animal', 'AI', 'Agency'];\n\nconst EducationOptions = ['Middle School', 'High School', 'University', 'College'];\n\nexport { TagsList, EducationOptions }; ","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar InputGroupAppend = createWithBsPrefix('input-group-append');\nvar InputGroupPrepend = createWithBsPrefix('input-group-prepend');\nvar InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\n\nvar InputGroupCheckbox = function InputGroupCheckbox(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"checkbox\"\n  }, props)));\n};\n\nvar InputGroupRadio = function InputGroupRadio(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"radio\"\n  }, props)));\n};\n\n/**\n *\n * @property {InputGroupAppend} Append\n * @property {InputGroupPrepend} Prepend\n * @property {InputGroupText} Text\n * @property {InputGroupRadio} Radio\n * @property {InputGroupCheckbox} Checkbox\n */\nvar InputGroup = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"size\", \"className\", \"as\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsPrefix, size && bsPrefix + \"-\" + size)\n  }));\n});\nInputGroup.displayName = 'InputGroup';\n\nvar InputGroupWithExtras = _extends({}, InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox,\n  Append: InputGroupAppend,\n  Prepend: InputGroupPrepend\n});\n\nexport default InputGroupWithExtras;","import React from 'react';\nimport { Form, Button, Col, InputGroup } from 'react-bootstrap';\nimport { FaWindowClose } from \"react-icons/fa\";\n\n/* ==============================================================\n    <InputFieldGroup name=String onChange={} type=input[, select] options=[options] [defaultValue=Array]\n\n    defaultValue = [{title: String, value: String}, ...]\n    onChange(name, fields) {\n        this.setState({ experiences: { ...this.state.experiences, [type]: fields } });\n        \n        fields = {\n            title: String,\n            value: String\n        }\n    }\n=================================================================== */\n\nconst InputField = (props) => {\n    return (\n        <Form.Control\n            required\n            as=\"input\"\n            value={props.value}\n            onChange={props.onChange}\n            placeholder=\"Field\"\n        >\n        </Form.Control>\n    );\n}\n\nconst SelectField = (props) => {\n    return (\n        <>\n            <Form.Control\n                as=\"select\"\n                onChange={props.onChange}\n            >\n                {props.options}\n            </Form.Control>\n        </>\n    );\n}\n\nclass FormInputGroup extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            uID: this.props.uID,\n            title: this.props.title,\n            value: this.props.value\n        }\n\n        this.titleChange = this.titleChange.bind(this);\n        this.valueChange = this.valueChange.bind(this);\n        this.sendDelete = this.sendDelete.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n    }\n\n    titleChange(e) {\n        this.setState({ title: e.target.value }, () => {\n            this.props.handleFieldChange(this.state);\n        });\n    }\n\n    valueChange(e) {\n        this.setState({ value: e.target.value }, () => {\n            this.props.handleFieldChange(this.state);\n        });\n    }\n\n    sendDelete(e) {\n        e.preventDefault();\n        this.props.handleDelete(this.state);\n    }\n\n    onKeyDown(e) {\n        if (e.keyCode === 9) this.props.addField(); // Tab\n    }\n\n    componentDidMount() {\n        this.expField.focus();\n        this.expField.addEventListener('keydown', this.onKeyDown, false);\n    }\n\n    componentWillUnmount() {\n        this.expField.removeEventListener('keydown', this.onKeyDown, false);\n    }\n    \n    render() {\n        let options;\n        if (this.props.type === 'select') {\n            options = this.props.options.map((option, i) => <option key={i}>{option}</option>);\n        }\n\n        return (\n            <Form.Row>\n                <Col xs={10}>\n                    <InputGroup>\n                        { (this.props.type === 'select')\n                            ? <SelectField onChange={this.titleChange} options={options} />\n                            : <InputField value={this.state.title} onChange={this.titleChange} />\n                        }\n                        <Form.Control\n                            required\n                            ref={elem => this.expField = elem}\n                            as=\"input\"\n                            value={this.state.value}\n                            onChange={this.valueChange}\n                            placeholder=\"Field\"\n                        />\n                    </InputGroup>\n                </Col>\n                <Col xs={2}>\n                    <Button variant=\"danger\" onClick={this.sendDelete}>\n                        <FaWindowClose size={16} />\n                    </Button>\n                </Col>\n            </Form.Row>\n        );\n    }\n}\n\nclass InputFieldGroup extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            fields: this.props.defaultValue || [],\n            IDCount: 0\n        }\n        this.handleAdd = this.handleAdd.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n        this.handleFieldChange = this.handleFieldChange.bind(this);\n    }\n\n    handleAdd(e) {\n        let newUID = this.state.IDCount + 1;\n        let placeholder = this.props.options ? this.props.options[0] : 'Planty';\n        let newFields = [...this.state.fields].concat({\n            title: placeholder, value: '', uID: newUID\n        });\n        \n        this.setState({ fields: newFields, IDCount: newUID }, () => {\n            this.props.onChange(this.props.name, this.state.fields);\n        });\n    }\n    \n    handleDelete(field) {\n        let newFields = [...this.state.fields];\n        for (let i = 0; i < newFields.length; i++) {\n            if (field[\"uID\"] === this.state.fields[i][\"uID\"]) {\n                newFields = newFields.slice(0, i).concat(newFields.slice(i+1, newFields.length));\n            }\n        }\n\n        this.setState({ fields: newFields }, () => {\n            console.log(this.state.fields)\n            this.props.onChange(this.props.name, this.state.fields);\n        });\n    }\n\n    handleFieldChange(field) {\n        let newFields = [...this.state.fields];\n        \n        for (let e in newFields) {\n            if (field[\"uID\"] === this.state.fields[e][\"uID\"]) {\n                newFields[e] = field;\n            }\n        }\n\n        this.setState({ fields: newFields }, () => {\n            this.props.onChange(this.props.name, this.state.fields);\n        });\n    }\n    \n    render() {\n        let fieldElems = this.state.fields.map((field, i) => {\n            return <FormInputGroup\n                key={i}\n                uID={field.uID}\n                title={field.title}\n                value={field.value}\n                handleFieldChange={this.handleFieldChange}    \n                handleDelete={this.handleDelete}\n                options={this.props.options}\n                type={this.props.type}\n                addField={this.handleAdd}\n            />;\n        });\n        return (\n            <>\n                <Button variant=\"danger\" onClick={this.handleAdd}>Add</Button>\n                {fieldElems}\n            </>\n        );\n    }\n}\n\nexport default InputFieldGroup;","import { Form, Col } from 'react-bootstrap';\nimport React from 'react';\n\n/* ==============================================================\n    <DatePicker onChange={} />\n\n    onChange(date) {\n        date = {\n            day: Number,\n            month: Number,\n            year: Number\n        }\n    }\n=================================================================== */\n\nconst months = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\nfunction range(start, end) {\n    var ans = [];\n    for (let i = start; i <= end; i++) {\n        ans.push(i);\n    }\n    return ans;\n}\n\nconst getCurrentYear = () => {\n    var dateObj = new Date();\n    var year = dateObj.getUTCFullYear();\n\n    return year;\n};\n\nclass DatePicker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            day: this.props.day,\n            month: this.props.month,\n            year: this.props.year\n        }\n        this.startYear = 1920;\n        this.currentYear = getCurrentYear();\n        this.inputChange = this.inputChange.bind(this);\n        this.sendData = this.sendData.bind(this);\n    }\n\n    inputChange(e) {\n        switch (e.target.dataset.format) {\n            case('day'):\n                this.setState({ day: e.target.value });   \n                break;\n            case('month'):\n                this.setState({ month: e.target.value });\n                break;\n            case('year'):\n                this.setState({ year: e.target.value });\n                break;\n            default:\n                console.error('unexpected input');\n        }\n    }\n\n    componentDidUpdate (prevProps, prevState) {\n        if (!(prevState.day === this.state.day && prevState.month === this.state.month && prevState.year === this.state.year)) {\n            this.sendData();\n        }\n    }\n\n    sendData() {\n        this.props.onChange(this.state);\n    }\n\n    render() {\n        return (\n            <Form.Row>\n                <Form.Group as={Col} sm={4} md={2} lg={1} >\n                    <Form.Control as=\"select\" required onChange={this.inputChange} data-format=\"day\" value={this.state.day} >\n                    <option value=\"\" disabled defaultValue>Day</option>\n                    {range(1,31).map((day, i) => <option className=\"form-select\" key={i} value={ day }>{ day }</option>)}\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group as={Col} sm={4} md={4} lg={2} >\n                    <Form.Control as=\"select\" required onChange={this.inputChange} data-format=\"month\" value={this.state.month} >\n                    <option value=\"\" disabled defaultValue>Month</option>\n                    {months.map((month, i) => <option className=\"form-select\" key={i+1} value={ i+1 }>{ month }</option>)}\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group as={Col} sm={4} md={2} lg={1} >\n                    <Form.Control as=\"select\" required onChange={this.inputChange} data-format=\"year\" value={this.state.year} >\n                    <option value=\"\" disabled defaultValue>Year</option>\n                    {range(this.startYear, this.currentYear).reverse().map((year, i) => <option className=\"form-select\" key={i} value={ year }>{ year }</option>)}\n                    </Form.Control>\n                </Form.Group>\n            </Form.Row>\n        );\n    }\n}\n\nexport default DatePicker;","import React from 'react';\nimport { Col, Form, Button } from 'react-bootstrap';\nimport Tags from '../Tag';\nimport ExperienceGroup from '../ExpandableFields';\nimport DatePicker from '../DatePicker';\nimport Error from \"../Error\";\nimport Required from '../Required';\nimport { TagsList as Interests, EducationOptions } from '../../Services/Mock';\n\nconst PageOne = (props) => {\n    const UserNamePassword = () => {\n        if (!props.edit) {\n            return (\n                <>\n                    <Form.Row>\n                        <Form.Group as={Col} sm={12} controlId=\"username\">\n                            <Form.Label>Username <Required /></Form.Label>\n                            <Form.Control\n                                required\n                                autoFocus\n                                name=\"username\"\n                                placeholder=\"Username\"\n                                onChange={props.inputChange}\n                                value={props.data.username}\n                            />\n                        </Form.Group>\n                    </Form.Row>\n\n                    <Form.Row>\n                        <Form.Group as={Col} sm={12} controlId=\"email\">\n                            <Form.Label>Email <Required /></Form.Label>\n                            <Form.Control\n                                required\n                                name=\"email\"\n                                type=\"email\"\n                                placeholder=\"Email\"\n                                onChange={props.inputChange}\n                                value={props.data.email}\n                            />\n                        </Form.Group>\n                    </Form.Row>\n\n                    <Form.Row>\n                        <Form.Group as={Col} sm={12} controlId=\"password\">\n                            <Form.Label>Password <Required /></Form.Label>\n                            <Form.Control\n                                required\n                                name=\"password\"\n                                type=\"password\"\n                                placeholder=\"Password\"\n                                onChange={props.inputChange}\n                                value={props.data.password}\n                            />\n                        </Form.Group>\n                    </Form.Row>\n                </>\n            );\n        }\n    }\n\n    return (\n            <>\n                <Form.Row>\n                    <Form.Group as={Col} sm={12} controlId=\"fullname\">\n                        <Form.Label>Full name <Required /></Form.Label>\n                        <Form.Control\n                            required\n                            name=\"fullname\"\n                            placeholder=\"Full Name\"\n                            onChange={props.inputChange}\n                            value={props.data.fullname}\n                        />\n                    </Form.Group>\n                </Form.Row>\n\n                { UserNamePassword() }\n\n                <Form.Row>\n                    <Form.Group as={Col} sm={12} controlId=\"birthday\">\n                        <Form.Label>Birthday <Required /></Form.Label>\n                        <DatePicker\n                            onChange={props.handleBirthday}\n                            day={props.data.birthday.day}\n                            month={props.data.birthday.month}\n                            year={props.data.birthday.year}\n                        />\n                    </Form.Group>\n                </Form.Row>\n        </>\n    );\n}\n\nconst PageTwo = (props) => {\n    return (\n        <>\n            <Form.Row>\n                <Form.Group as={Col} sm={12} className=\"mb-3\" controlId=\"education\">\n                    <Form.Label>Education</Form.Label>\n                    <ExperienceGroup\n                        type=\"select\"\n                        name=\"education\"\n                        onChange={props.setInfo}\n                        options={EducationOptions}\n                        defaultValue={props.data.experiences.education}\n                    />\n                </Form.Group>\n            </Form.Row>\n\n            <Form.Row>\n                <Form.Group as={Col} sm={12} className=\"mb-3\" controlId=\"work\">\n                    <Form.Label>Work</Form.Label>\n                    <ExperienceGroup\n                        type=\"input\"\n                        name=\"work\"\n                        onChange={props.setInfo}\n                        defaultValue={props.data.experiences.work}\n                    />\n                </Form.Group>\n            </Form.Row>\n\n            <Form.Row>\n                <Form.Group as={Col} sm={12} className=\"mb-3\" controlId=\"interests\">\n                    <Form.Label>Interests</Form.Label>\n                    <Tags\n                        onChange={props.tagChange}\n                        tags={Interests}\n                        group=\"interests\"\n                        onAsDefault={props.data.interests}\n                    />\n                </Form.Group>\n            </Form.Row>\n        </>\n    );\n}\n\nclass UserForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        let oldData = this.props.oldData;\n        let data = (oldData) ? {\n            username: oldData.username,\n            fullname: oldData.fullname,\n            password: oldData.password,\n            email: oldData.email,\n            birthday: {\n                day: oldData.birthday.day,\n                month: oldData.birthday.month,\n                year: oldData.birthday.year\n            },\n            experiences: {\n                education: oldData.experiences.education,\n                work: oldData.experiences.work\n            },\n            interests: oldData.interests\n        } : {\n            username: \"\",\n            fullname: \"\",\n            password: \"\",\n            email: \"\",\n            birthday: {\n                day: \"\",\n                month: \"\",\n                year: \"\"\n            },\n            experiences: {\n                education: [],\n                work: []\n            },\n            interests: []\n        }\n\n        this.state = {\n            data: data,\n            page: 1\n        }\n\n        this.tagChange = this.tagChange.bind(this);\n        this.setInfo = this.setInfo.bind(this);\n        this.handleBirthday = this.handleBirthday.bind(this);\n        this.inputChange = this.inputChange.bind(this);\n        this._next = this._next.bind(this);\n        this._prev = this._prev.bind(this);\n    }\n\n    tagChange(group, tags) {\n        switch (group) {\n            case \"interests\":\n                this.setState({data: { ...this.state.data, interests: tags }}, () => {\n                    this.props.inputChange(this.state.data);\n                });\n                break;\n            default:\n                console.error(\"unknown tag group\");\n        }\n    }\n\n    setInfo(type, fields) {\n        this.setState({\n            data: { ...this.state.data, experiences: { ...this.state.data.experiences, [type]: fields }},\n        }, () => {\n            this.props.inputChange(this.state.data);\n        });\n    }\n\n    handleBirthday(date) {\n        this.setState({data: { ...this.state.data, birthday: date }}, () => {\n            this.props.inputChange(this.state.data);\n        });\n    }\n\n    inputChange(e) {\n        this.setState({data: { ...this.state.data, [e.target.name]: e.target.value }}, () => {\n            this.props.inputChange(this.state.data);\n        });\n    }\n\n    _next() {\n        if (this.props.validate(this.state.data)) {\n            this.setState({ page: this.state.page+1 });\n        }\n    }\n\n    _prev() {\n        if (this.props.validate(this.state.data)) {\n            this.setState({ page: this.state.page-1 });\n        }\n    }\n\n    render() {\n        const RenderPage = () => {\n            switch (this.state.page) {\n                case 1:\n                    return (\n                    <>\n                        <PageOne\n                            data={this.state.data}\n                            inputChange={this.inputChange}\n                            handleBirthday={this.handleBirthday}\n                            edit={this.props.edit}\n                        />\n                        <Error errors={this.props.errors} />\n                        <Button variant=\"outline-info\" onClick={this._next}>\n                            Next\n                        </Button>\n                    </>\n                    );\n                case 2:\n                    return (\n                    <>\n                        <PageTwo\n                            data={this.state.data}\n                            tagChange={this.tagChange}\n                            setInfo={this.setInfo}\n                            edit={this.props.edit}\n                        />\n                        <Error errors={this.props.errors} />\n                        <Button variant=\"outline-info\" onClick={this._prev}>\n                            Back\n                        </Button>\n                        <Button variant=\"info\" type=\"submit\">\n                            {(this.props.edit) ? \"Save Edit\" : \"Create\"}\n                        </Button>\n                    </>\n                    );\n                default:\n                    return (<span>Can't find the current page</span>)                      \n            }\n        }\n        \n        return (\n        <>{ RenderPage() }</>\n        );\n    }\n}\n\n/*\n\nclass UserForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        let oldData = this.props.oldData;\n        this.state = (oldData) ? {\n            username: oldData.username,\n            fullname: oldData.fullname,\n            password: oldData.password,\n            email: oldData.email,\n            birthday: {\n                day: oldData.birthday.day,\n                month: oldData.birthday.month,\n                year: oldData.birthday.year\n            },\n            experiences: {\n                education: oldData.experiences.education,\n                work: oldData.experiences.work\n            },\n            interests: oldData.interests\n        } : {\n            username: \"\",\n            fullname: \"\",\n            password: \"\",\n            email: \"\",\n            birthday: {\n                day: \"\",\n                month: \"\",\n                year: \"\"\n            },\n            experiences: {\n                education: [],\n                work: []\n            },\n            interests: []\n        }\n\n        this.tagChange = this.tagChange.bind(this);\n        this.setInfo = this.setInfo.bind(this);\n        this.handleBirthday = this.handleBirthday.bind(this);\n        this.inputChange = this.inputChange.bind(this);\n    }\n\n    tagChange(group, tags) {\n        switch (group) {\n            case \"interests\":\n                this.setState({ interests: tags }, () => {\n                    this.props.inputChange(this.state);\n                });\n                break;\n            default:\n                console.error(\"unknown tag group\");\n        }\n    }\n\n    setInfo(type, fields) {\n        this.setState({\n            experiences: { ...this.state.experiences, [type]: fields },\n        }, () => {\n            this.props.inputChange(this.state);\n        });\n    }\n\n    handleBirthday(date) {\n        this.setState({ birthday: date }, () => {\n            this.props.inputChange(this.state);\n        });\n    }\n\n    inputChange(e) {\n        this.setState({ [e.target.name]: e.target.value }, () => {\n            this.props.inputChange(this.state);\n        });\n    }\n\n    render() {\n        const UserNamePassword = () => {\n            if (!this.props.edit) {\n                return (\n                    <>\n                        <Form.Row>\n                            <Form.Group as={Col} sm={12} controlId=\"username\">\n                                <Form.Label>Username</Form.Label>\n                                <Form.Control\n                                    required\n                                    autoFocus\n                                    name=\"username\"\n                                    placeholder=\"Username\"\n                                    onChange={this.inputChange}\n                                    value={this.state.username}\n                                />\n                            </Form.Group>\n                        </Form.Row>\n\n                        <Form.Row>\n                            <Form.Group as={Col} sm={12} controlId=\"email\">\n                                <Form.Label>Email</Form.Label>\n                                <Form.Control\n                                    required\n                                    name=\"email\"\n                                    type=\"email\"\n                                    placeholder=\"Email\"\n                                    onChange={this.inputChange}\n                                    value={this.state.email}\n                                />\n                            </Form.Group>\n                        </Form.Row>\n\n                        <Form.Row>\n                            <Form.Group as={Col} sm={12} controlId=\"password\">\n                                <Form.Label>Password</Form.Label>\n                                <Form.Control\n                                    required\n                                    name=\"password\"\n                                    type=\"password\"\n                                    placeholder=\"Password\"\n                                    onChange={this.inputChange}\n                                    value={this.state.password}\n                                />\n                            </Form.Group>\n                        </Form.Row>\n                    </>\n                );\n            }\n        }\n        return (\n            <>\n                <Form.Row>\n                    <Form.Group as={Col} sm={12} controlId=\"fullname\">\n                        <Form.Label>Full name</Form.Label>\n                        <Form.Control\n                            required\n                            name=\"fullname\"\n                            placeholder=\"Full Name\"\n                            onChange={this.inputChange}\n                            value={this.state.fullname}\n                        />\n                    </Form.Group>\n                </Form.Row>\n\n                { UserNamePassword() }\n\n                <Form.Row>\n                    <Form.Group as={Col} sm={12} controlId=\"birthday\">\n                        <Form.Label>Birthday</Form.Label>\n                        <DatePicker\n                            onChange={this.handleBirthday}\n                            day={this.state.birthday.day}\n                            month={this.state.birthday.month}\n                            year={this.state.birthday.year}\n                        />\n                    </Form.Group>\n                </Form.Row>\n\n                <Form.Row>\n                    <Form.Group as={Col} sm={12} className=\"mb-3\" controlId=\"education\">\n                        <Form.Label>Education</Form.Label>\n                        <ExperienceGroup\n                            type=\"select\"\n                            name=\"education\"\n                            onChange={this.setInfo}\n                            options={EducationOptions}\n                            defaultValue={this.state.experiences.education}\n                        />\n                    </Form.Group>\n                </Form.Row>\n\n                <Form.Row>\n                    <Form.Group as={Col} sm={12} className=\"mb-3\" controlId=\"work\">\n                        <Form.Label>Work</Form.Label>\n                        <ExperienceGroup\n                            type=\"input\"\n                            name=\"work\"\n                            onChange={this.setInfo}\n                            defaultValue={this.state.experiences.work}\n                        />\n                    </Form.Group>\n                </Form.Row>\n\n                <Form.Row>\n                    <Form.Group as={Col} sm={12} className=\"mb-3\" controlId=\"interests\">\n                        <Form.Label>Interests</Form.Label>\n                        <Tags\n                            onChange={this.tagChange}\n                            tags={Interests}\n                            group=\"interests\"\n                            onAsDefault={this.state.interests}\n                        />\n                    </Form.Group>\n                </Form.Row>\n\n                <Error errors={this.props.errors} />\n\n                <Button variant=\"info\" type=\"submit\">\n                    {(this.props.edit) ? \"Save Edit\" : \"Create\"}\n                </Button>\n            </>\n        );\n    }\n}\n\n*/\n\nexport default UserForm;"],"sourceRoot":""}